{
  "1": {
    "name": "twoSum",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      },
      {
        "name": "target",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer[]",
      "size": 2,
      "orderInsensitive": true
    },
    "manual": false,
    "exampleTestcases": "[2,7,11,15]\n9\n[3,2,4]\n6\n[3,3]\n6",
    "exampleResult": "[0,1]\n[1,2]\n[0,1]"
  },
  "2": {
    "name": "addTwoNumbers",
    "params": [
      {
        "name": "l1",
        "type": "ListNode",
        "dealloc": false
      },
      {
        "name": "l2",
        "type": "ListNode",
        "dealloc": false
      }
    ],
    "return": {
      "type": "ListNode",
      "dealloc": true
    },
    "exampleTestcases": "[2,4,3]\n[5,6,4]\n[0]\n[0]\n[9,9,9,9,9,9,9]\n[9,9,9,9]\n[9,9,9,9,9,9,9]\n[9,9,9,9]",
    "exampleResult": "[7,0,8]\n[0]\n[8,9,9,9,0,0,0,1]\n[8,9,9,9,0,0,0,1]"
  },
  "3": {
    "name": "lengthOfLongestSubstring",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "\"abcabcbb\"\n\"bbbbb\"\n\"pwwkew\"\n\"\"",
    "exampleResult": "3\n1\n3\n0"
  },
  "4": {
    "name": "findMedianSortedArrays",
    "params": [
      {
        "name": "nums1",
        "type": "integer[]"
      },
      {
        "name": "nums2",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "double"
    },
    "exampleTestcases": "[1,3]\n[2]\n[1,2]\n[3,4]\n[0,0]\n[0,0]\n[]\n[1]\n[2]\n[]\n[3]\n[-2,-1]",
    "exampleResult": "2\n2.5\n0.0\n1\n2\n-1"
  },
  "5": {
    "name": "longestPalindrome",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": "\"babad\"\n\"cbbd\"\n\"a\"\n\"ac\"\n\"cbbd\""
  },
  "6": {
    "name": "convert",
    "params": [
      {
        "name": "s",
        "type": "string"
      },
      {
        "name": "numRows",
        "type": "integer"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": "\"PAYPALISHIRING\"\n3\n\"PAYPALISHIRING\"\n4\n\"A\"\n1"
  },
  "7": {
    "name": "reverse",
    "params": [
      {
        "name": "x",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "123\n-123\n120\n0"
  },
  "8": {
    "name": "myAtoi",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "\"42\"\n\"   -42\"\n\"4193 with words\"\n\"words and 987\"\n\"-91283472332\""
  },
  "9": {
    "name": "isPalindrome",
    "params": [
      {
        "name": "x",
        "type": "integer"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "121\n-121\n10\n-101"
  },
  "10": {
    "name": "isMatch",
    "params": [
      {
        "name": "s",
        "type": "string"
      },
      {
        "name": "p",
        "type": "string"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "\"aa\"\n\"a\"\n\"aa\"\n\"a*\"\n\"ab\"\n\".*\"\n\"aab\"\n\"c*a*b\"\n\"mississippi\"\n\"mis*is*p*.\""
  },
  "11": {
    "name": "maxArea",
    "params": [
      {
        "name": "height",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[1,8,6,2,5,4,8,3,7]\n[1,1]\n[4,3,2,1,4]\n[1,2,1]",
    "exampleResult": "49\n1\n16\n2"
  },
  "12": {
    "name": "intToRoman",
    "params": [
      {
        "name": "num",
        "type": "integer"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": "3\n4\n9\n58\n1994"
  },
  "13": {
    "name": "romanToInt",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "\"III\"\n\"IV\"\n\"IX\"\n\"LVIII\"\n\"MCMXCIV\""
  },
  "14": {
    "name": "longestCommonPrefix",
    "params": [
      {
        "name": "strs",
        "type": "string[]"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": "[\"flower\",\"flow\",\"flight\"]\n[\"dog\",\"racecar\",\"car\"]"
  },
  "15": {
    "name": "threeSum",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "list<list<integer>>",
      "colsize": 3,
      "dealloc": true
    },
    "exampleTestcases": "[-1,0,1,2,-1,-4]\n[]\n[0]\n[-1,0,1,2,-1,-4,-2,-3,3,0,4]\n[-1,0,1,2,-1,-4,-2,-3,3,0,4]",
    "exampleResult": "[[-1,-1,2],[-1,0,1]]\n[]\n[]\n[[-4,0,4],[-4,1,3],[-3,-1,4],[-3,0,3],[-3,1,2],[-2,-1,3],[-2,0,2],[-1,-1,2],[-1,0,1]]\n[[-4,0,4],[-4,1,3],[-3,-1,4],[-3,0,3],[-3,1,2],[-2,-1,3],[-2,0,2],[-1,-1,2],[-1,0,1]]"
  },
  "16": {
    "name": "threeSumClosest",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      },
      {
        "name": "target",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[-1,2,1,-4]\n1",
    "exampleResult": "2"
  },
  "17": {
    "name": "letterCombinations",
    "params": [
      {
        "name": "digits",
        "type": "string"
      }
    ],
    "return": {
      "type": "list<string>"
    },
    "exampleTestcases": "\"23\"\n\"\"\n\"2\""
  },
  "18": {
    "name": "fourSum",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      },
      {
        "name": "target",
        "type": "integer"
      }
    ],
    "return": {
      "type": "list<list<integer>>",
      "colsize": 4,
      "dealloc": true
    },
    "exampleTestcases": "[1,0,-1,0,-2,2]\n0\n[]\n0\n[-2,-1,-1,1,1,2,2]\n0"
  },
  "19": {
    "name": "removeNthFromEnd",
    "params": [
      {
        "name": "head",
        "type": "ListNode",
        "dealloc": false
      },
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "ListNode",
      "dealloc": true
    },
    "exampleTestcases": "[1,2,3,4,5]\n2\n[1]\n1\n[1,2]\n1"
  },
  "20": {
    "name": "isValid",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "\"()\"\n\"()[]{}\"\n\"(]\"\n\"([)]\"\n\"{[]}\"\n\"[\"\n\"[\"",
    "exampleResult": "true\ntrue\nfalse\nfalse\ntrue\nfalse\nfalse"
  },
  "21": {
    "name": "mergeTwoLists",
    "params": [
      {
        "name": "l1",
        "type": "ListNode",
        "dealloc": false
      },
      {
        "name": "l2",
        "type": "ListNode",
        "dealloc": false
      }
    ],
    "return": {
      "type": "ListNode",
      "dealloc": true
    },
    "exampleTestcases": "[1,2,4]\n[1,3,4]\n[]\n[]\n[]\n[0]",
    "exampleResult": "[1,1,2,3,4,4]\n[]\n[0]"
  },
  "22": {
    "name": "generateParenthesis",
    "params": [
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "list<string>"
    },
    "exampleTestcases": "3\n1",
    "exampleResult": "[\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n[\"()\"]"
  },
  "23": {
    "name": "mergeKLists",
    "params": [
      {
        "name": "lists",
        "type": "ListNode[]",
        "dealloc": false
      }
    ],
    "return": {
      "type": "ListNode",
      "dealloc": true
    },
    "exampleTestcases": "[[1,4,5],[1,3,4],[2,6]]\n[]\n[[]]"
  },
  "24": {
    "name": "swapPairs",
    "params": [
      {
        "name": "head",
        "type": "ListNode"
      }
    ],
    "return": {
      "type": "ListNode"
    },
    "exampleTestcases": "[1,2,3,4]\n[]\n[1]",
    "exampleResult": "[2,1,4,3]\n[]\n[1]"
  },
  "25": {
    "name": "reverseKGroup",
    "params": [
      {
        "name": "head",
        "type": "ListNode"
      },
      {
        "name": "k",
        "type": "integer"
      }
    ],
    "return": {
      "type": "ListNode"
    },
    "exampleTestcases": "[1,2,3,4,5]\n2\n[1,2,3,4,5]\n3\n[1,2,3,4,5]\n1\n[1]\n1",
    "exampleResult": "[2,1,4,3,5]\n[3,2,1,4,5]\n[1,2,3,4,5]\n[1]"
  },
  "26": {
    "name": "removeDuplicates",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "output": {
      "paramindex": 0,
      "size": "ret"
    },
    "exampleTestcases": "[1,1,2]\n[0,0,1,1,1,2,2,3,3,4]",
    "exampleResult": "[1,2]\n[0,1,2,3,4]"
  },
  "27": {
    "name": "removeElement",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      },
      {
        "name": "val",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "output": {
      "paramindex": 0,
      "size": "ret"
    },
    "exampleTestcases": "[3,2,2,3]\n3\n[0,1,2,2,3,0,4,2]\n2",
    "exampleResult": "[2,2]\n[0,1,3,0,4]"
  },
  "28": {
    "name": "strStr",
    "params": [
      {
        "name": "haystack",
        "type": "string"
      },
      {
        "name": "needle",
        "type": "string"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "\"hello\"\n\"ll\"\n\"aaaaa\"\n\"bba\"\n\"\"\n\"\""
  },
  "29": {
    "name": "divide",
    "params": [
      {
        "name": "dividend",
        "type": "integer"
      },
      {
        "name": "divisor",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "10\n3\n7\n-3\n0\n1\n1\n1"
  },
  "30": {
    "name": "findSubstring",
    "params": [
      {
        "name": "s",
        "type": "string"
      },
      {
        "name": "words",
        "type": "string[]"
      }
    ],
    "return": {
      "type": "list<integer>"
    },
    "exampleTestcases": "\"barfoothefoobarman\"\n[\"foo\",\"bar\"]\n\"wordgoodgoodgoodbestword\"\n[\"word\",\"good\",\"best\",\"word\"]\n\"barfoofoobarthefoobarman\"\n[\"bar\",\"foo\",\"the\"]"
  },
  "31": {
    "name": "nextPermutation",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "void"
    },
    "output": {
      "paramindex": 0
    },
    "exampleTestcases": "[1,2,3]\n[3,2,1]\n[1,1,5]\n[1]"
  },
  "32": {
    "name": "longestValidParentheses",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "\"(()\"\n\")()())\"\n\"\""
  },
  "33": {
    "name": "search",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      },
      {
        "name": "target",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[4,5,6,7,0,1,2]\n0\n[4,5,6,7,0,1,2]\n3\n[1]\n0"
  },
  "34": {
    "name": "searchRange",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      },
      {
        "name": "target",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer[]"
    },
    "exampleTestcases": "[5,7,7,8,8,10]\n8\n[5,7,7,8,8,10]\n6\n[]\n0"
  },
  "35": {
    "name": "searchInsert",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      },
      {
        "name": "target",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[1,3,5,6]\n5\n[1,3,5,6]\n2\n[1,3,5,6]\n7\n[1,3,5,6]\n0\n[1]\n0"
  },
  "36": {
    "name": "isValidSudoku",
    "params": [
      {
        "name": "board",
        "type": "character[][]"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "[[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\n[[\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]"
  },
  "37": {
    "name": "solveSudoku",
    "params": [
      {
        "name": "board",
        "type": "character[][]"
      }
    ],
    "return": {
      "type": "void"
    },
    "output": {
      "paramindex": 0
    },
    "exampleTestcases": "[[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]"
  },
  "38": {
    "name": "countAndSay",
    "params": [
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": "1\n4"
  },
  "39": {
    "name": "combinationSum",
    "params": [
      {
        "name": "candidates",
        "type": "integer[]"
      },
      {
        "name": "target",
        "type": "integer"
      }
    ],
    "return": {
      "type": "list<list<integer>>",
      "dealloc": true
    },
    "exampleTestcases": "[2,3,6,7]\n7\n[2,3,5]\n8\n[2]\n1\n[1]\n1\n[1]\n2"
  },
  "40": {
    "name": "combinationSum2",
    "params": [
      {
        "name": "candidates",
        "type": "integer[]"
      },
      {
        "name": "target",
        "type": "integer"
      }
    ],
    "return": {
      "type": "list<list<integer>>",
      "dealloc": true
    },
    "exampleTestcases": "[10,1,2,7,6,1,5]\n8\n[2,5,2,1,2]\n5"
  },
  "41": {
    "name": "firstMissingPositive",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[1,2,0]\n[3,4,-1,1]\n[7,8,9,11,12]"
  },
  "42": {
    "name": "trap",
    "params": [
      {
        "name": "height",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[0,1,0,2,1,0,1,3,2,1,2,1]\n[4,2,0,3,2,5]",
    "exampleResult": "6\n9"
  },
  "43": {
    "name": "multiply",
    "params": [
      {
        "name": "num1",
        "type": "string"
      },
      {
        "name": "num2",
        "type": "string"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": "\"2\"\n\"3\"\n\"123\"\n\"456\""
  },
  "44": {
    "name": "isMatch",
    "params": [
      {
        "name": "s",
        "type": "string"
      },
      {
        "name": "p",
        "type": "string"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "\"aa\"\n\"a\"\n\"aa\"\n\"*\"\n\"cb\"\n\"?a\"\n\"adceb\"\n\"*a*b\"\n\"acdcb\"\n\"a*c?b\""
  },
  "45": {
    "name": "jump",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[2,3,1,1,4]\n[2,3,0,1,4]"
  },
  "46": {
    "name": "permute",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "list<list<integer>>",
      "colsize": "size_1",
      "dealloc": true
    },
    "exampleTestcases": "[1,2,3]\n[0,1]\n[1]"
  },
  "47": {
    "name": "permuteUnique",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "list<list<integer>>",
      "colsize": "size_1",
      "dealloc": true
    },
    "exampleTestcases": "[1,1,2]\n[1,2,3]"
  },
  "48": {
    "name": "rotate",
    "params": [
      {
        "name": "matrix",
        "type": "integer[][]"
      }
    ],
    "return": {
      "type": "void"
    },
    "output": {
      "paramindex": 0
    },
    "exampleTestcases": "[[1,2,3],[4,5,6],[7,8,9]]\n[[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]\n[[1]]\n[[1,2],[3,4]]"
  },
  "49": {
    "name": "groupAnagrams",
    "params": [
      {
        "name": "strs",
        "type": "string[]"
      }
    ],
    "return": {
      "type": "list<list<string>>",
      "dealloc": true
    },
    "exampleTestcases": "[\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]\n[\"\"]\n[\"a\"]",
    "exampleResult": "[[\"eat\",\"tea\",\"ate\"],[\"tan\",\"nat\"],[\"bat\"]]\n[[\"\"]]\n[[\"a\"]]"
  },
  "50": {
    "name": "myPow",
    "params": [
      {
        "name": "x",
        "type": "double"
      },
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "double"
    },
    "exampleTestcases": "2.00000\n10\n2.10000\n3\n2.00000\n-2"
  },
  "51": {
    "name": "solveNQueens",
    "params": [
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "list<list<string>>",
      "colsize": "param_1",
      "dealloc": true
    },
    "exampleTestcases": "4\n1"
  },
  "52": {
    "name": "totalNQueens",
    "params": [
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "4\n1"
  },
  "53": {
    "name": "maxSubArray",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[-2,1,-3,4,-1,2,1,-5,4]\n[1]\n[5,4,-1,7,8]",
    "exampleResult": "6\n1\n23"
  },
  "54": {
    "name": "spiralOrder",
    "params": [
      {
        "name": "matrix",
        "type": "integer[][]"
      }
    ],
    "return": {
      "type": "list<integer>",
      "size": "size_1 * col_size_1",
      "dealloc": true
    },
    "exampleTestcases": "[[1,2,3],[4,5,6],[7,8,9]]\n[[1,2,3,4],[5,6,7,8],[9,10,11,12]]"
  },
  "55": {
    "name": "canJump",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "[2,3,1,1,4]\n[3,2,1,0,4]"
  },
  "56": {
    "name": "merge",
    "params": [
      {
        "name": "intervals",
        "type": "integer[][]"
      }
    ],
    "return": {
      "type": "integer[][]"
    },
    "exampleTestcases": "[[1,3],[2,6],[8,10],[15,18]]\n[[1,4],[4,5]]"
  },
  "57": {
    "name": "insert",
    "params": [
      {
        "name": "intervals",
        "type": "integer[][]"
      },
      {
        "name": "newInterval",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer[][]"
    },
    "exampleTestcases": "[[1,3],[6,9]]\n[2,5]\n[[1,2],[3,5],[6,7],[8,10],[12,16]]\n[4,8]\n[]\n[5,7]\n[[1,5]]\n[2,3]\n[[1,5]]\n[2,7]"
  },
  "58": {
    "name": "lengthOfLastWord",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "\"Hello World\"\n\" \""
  },
  "59": {
    "name": "generateMatrix",
    "params": [
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer[][]",
      "rowsize": "param_1",
      "colsize": "param_1",
      "dealloc": true
    },
    "exampleTestcases": "3\n1"
  },
  "60": {
    "name": "getPermutation",
    "params": [
      {
        "name": "n",
        "type": "integer"
      },
      {
        "name": "k",
        "type": "integer"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": "3\n3\n4\n9\n3\n1"
  },
  "61": {
    "name": "rotateRight",
    "params": [
      {
        "name": "head",
        "type": "ListNode",
        "dealloc": false
      },
      {
        "name": "k",
        "type": "integer"
      }
    ],
    "return": {
      "type": "ListNode",
      "dealloc": true
    },
    "exampleTestcases": "[1,2,3,4,5]\n2\n[0,1,2]\n4"
  },
  "62": {
    "name": "uniquePaths",
    "params": [
      {
        "name": "m",
        "type": "integer"
      },
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "3\n7\n3\n2\n7\n3\n3\n3"
  },
  "63": {
    "name": "uniquePathsWithObstacles",
    "params": [
      {
        "name": "obstacleGrid",
        "type": "integer[][]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[[0,0,0],[0,1,0],[0,0,0]]\n[[0,1],[0,0]]"
  },
  "64": {
    "name": "minPathSum",
    "params": [
      {
        "name": "grid",
        "type": "integer[][]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[[1,3,1],[1,5,1],[4,2,1]]\n[[1,2,3],[4,5,6]]"
  },
  "65": {
    "name": "isNumber",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "\"0\"\n\"e\"\n\".\"\n\".1\""
  },
  "66": {
    "name": "plusOne",
    "params": [
      {
        "name": "digits",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer[]"
    },
    "exampleTestcases": "[1,2,3]\n[4,3,2,1]\n[0]",
    "exampleResult": "[1,2,4]\n[4,3,2,2]\n[1]"
  },
  "67": {
    "name": "addBinary",
    "params": [
      {
        "name": "a",
        "type": "string"
      },
      {
        "name": "b",
        "type": "string"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": "\"11\"\n\"1\"\n\"1010\"\n\"1011\""
  },
  "68": {
    "name": "fullJustify",
    "params": [
      {
        "name": "words",
        "type": "string[]"
      },
      {
        "name": "maxWidth",
        "type": "integer"
      }
    ],
    "return": {
      "type": "list<string>"
    },
    "exampleTestcases": "[\"This\", \"is\", \"an\", \"example\", \"of\", \"text\", \"justification.\"]\n16\n[\"What\",\"must\",\"be\",\"acknowledgment\",\"shall\",\"be\"]\n16\n[\"Science\",\"is\",\"what\",\"we\",\"understand\",\"well\",\"enough\",\"to\",\"explain\",\"to\",\"a\",\"computer.\",\"Art\",\"is\",\"everything\",\"else\",\"we\",\"do\"]\n20"
  },
  "69": {
    "name": "mySqrt",
    "params": [
      {
        "name": "x",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "4\n8"
  },
  "70": {
    "name": "climbStairs",
    "params": [
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "2\n3",
    "exampleResult": "2\n3"
  },
  "71": {
    "name": "simplifyPath",
    "params": [
      {
        "name": "path",
        "type": "string"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": "\"/home/\"\n\"/../\"\n\"/home//foo/\"\n\"/a/./b/../../c/\""
  },
  "72": {
    "name": "minDistance",
    "params": [
      {
        "name": "word1",
        "type": "string"
      },
      {
        "name": "word2",
        "type": "string"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "\"horse\"\n\"ros\"\n\"intention\"\n\"execution\""
  },
  "73": {
    "name": "setZeroes",
    "params": [
      {
        "name": "matrix",
        "type": "integer[][]"
      }
    ],
    "return": {
      "type": "void"
    },
    "output": {
      "paramindex": 0
    },
    "exampleTestcases": "[[1,1,1],[1,0,1],[1,1,1]]\n[[0,1,2,0],[3,4,5,2],[1,3,1,5]]"
  },
  "74": {
    "name": "searchMatrix",
    "params": [
      {
        "name": "matrix",
        "type": "integer[][]"
      },
      {
        "name": "target",
        "type": "integer"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "[[1,3,5,7],[10,11,16,20],[23,30,34,60]]\n3\n[[1,3,5,7],[10,11,16,20],[23,30,34,60]]\n13"
  },
  "75": {
    "name": "sortColors",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "void"
    },
    "output": {
      "paramindex": 0
    },
    "exampleTestcases": "[2,0,2,1,1,0]\n[2,0,1]\n[0]\n[1]"
  },
  "76": {
    "name": "minWindow",
    "params": [
      {
        "name": "s",
        "type": "string"
      },
      {
        "name": "t",
        "type": "string"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": "\"ADOBECODEBANC\"\n\"ABC\"\n\"a\"\n\"a\""
  },
  "77": {
    "name": "combine",
    "params": [
      {
        "name": "n",
        "type": "integer"
      },
      {
        "name": "k",
        "type": "integer"
      }
    ],
    "return": {
      "type": "list<list<integer>>",
      "dealloc": true
    },
    "exampleTestcases": "4\n2\n1\n1"
  },
  "78": {
    "name": "subsets",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "list<list<integer>>",
      "dealloc": true
    },
    "exampleTestcases": "[1,2,3]\n[0]"
  },
  "79": {
    "name": "exist",
    "params": [
      {
        "name": "board",
        "type": "character[][]"
      },
      {
        "name": "word",
        "type": "string"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "[[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]]\n\"ABCCED\"\n[[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]]\n\"SEE\"\n[[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]]\n\"ABCB\""
  },
  "80": {
    "name": "removeDuplicates",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "output": {
      "paramindex": 0,
      "size": "ret"
    },
    "exampleTestcases": "[1,1,1,2,2,3]\n[0,0,1,1,1,1,2,3,3]"
  },
  "81": {
    "name": "search",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      },
      {
        "name": "target",
        "type": "integer"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "[2,5,6,0,0,1,2]\n0\n[2,5,6,0,0,1,2]\n3"
  },
  "82": {
    "name": "deleteDuplicates",
    "params": [
      {
        "name": "head",
        "type": "ListNode",
        "dealloc": false
      }
    ],
    "return": {
      "type": "ListNode",
      "dealloc": true
    },
    "exampleTestcases": "[1,2,3,3,4,4,5]\n[1,1,1,2,3]"
  },
  "83": {
    "name": "deleteDuplicates",
    "params": [
      {
        "name": "head",
        "type": "ListNode",
        "dealloc": false
      }
    ],
    "return": {
      "type": "ListNode",
      "dealloc": true
    },
    "exampleTestcases": "[1,1,2]\n[1,1,2,3,3]"
  },
  "84": {
    "name": "largestRectangleArea",
    "params": [
      {
        "name": "heights",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[2,1,5,6,2,3]\n[2,4]",
    "exampleResult": "10\n4"
  },
  "85": {
    "name": "maximalRectangle",
    "params": [
      {
        "name": "matrix",
        "type": "character[][]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]\n[]\n[[\"0\"]]\n[[\"1\"]]\n[[\"0\",\"0\"]]"
  },
  "86": {
    "name": "partition",
    "params": [
      {
        "name": "head",
        "type": "ListNode",
        "dealloc": false
      },
      {
        "name": "x",
        "type": "integer"
      }
    ],
    "return": {
      "type": "ListNode",
      "dealloc": true
    },
    "exampleTestcases": "[1,4,3,2,5,2]\n3\n[2,1]\n2"
  },
  "87": {
    "name": "isScramble",
    "params": [
      {
        "name": "s1",
        "type": "string"
      },
      {
        "name": "s2",
        "type": "string"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "\"great\"\n\"rgeat\"\n\"abcde\"\n\"caebd\"\n\"a\"\n\"a\""
  },
  "88": {
    "name": "merge",
    "params": [
      {
        "name": "nums1",
        "type": "integer[]",
        "implicitsizeparam": false
      },
      {
        "name": "m",
        "type": "integer"
      },
      {
        "name": "nums2",
        "type": "integer[]",
        "implicitsizeparam": false
      },
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "void"
    },
    "output": {
      "paramindex": 0
    },
    "exampleTestcases": "[1,2,3,0,0,0]\n3\n[2,5,6]\n3\n[1]\n1\n[]\n0"
  },
  "89": {
    "name": "grayCode",
    "params": [
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "list<integer>"
    },
    "exampleTestcases": "2\n1"
  },
  "90": {
    "name": "subsetsWithDup",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "list<list<integer>>",
      "dealloc": true
    },
    "exampleTestcases": "[1,2,2]\n[0]"
  },
  "91": {
    "name": "numDecodings",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "\"12\"\n\"226\"\n\"0\"\n\"06\""
  },
  "92": {
    "name": "reverseBetween",
    "params": [
      {
        "name": "head",
        "type": "ListNode",
        "dealloc": false
      },
      {
        "name": "left",
        "type": "integer"
      },
      {
        "name": "right",
        "type": "integer"
      }
    ],
    "return": {
      "type": "ListNode",
      "dealloc": true
    },
    "exampleTestcases": "[1,2,3,4,5]\n2\n4\n[5]\n1\n1"
  },
  "93": {
    "name": "restoreIpAddresses",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "list<string>"
    },
    "exampleTestcases": "\"25525511135\"\n\"0000\"\n\"1111\"\n\"010010\"\n\"101023\""
  },
  "94": {
    "name": "inorderTraversal",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "list<integer>",
      "dealloc": true
    },
    "exampleTestcases": "[1,null,2,3]\n[]\n[1]\n[1,2]\n[1,null,2]",
    "exampleResult": "[1,3,2]\n[]\n[1]\n[2,1]\n[1,2]"
  },
  "95": {
    "name": "generateTrees",
    "params": [
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "list<TreeNode>"
    },
    "exampleTestcases": "3\n1"
  },
  "96": {
    "name": "numTrees",
    "params": [
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "3\n1"
  },
  "97": {
    "name": "isInterleave",
    "params": [
      {
        "name": "s1",
        "type": "string"
      },
      {
        "name": "s2",
        "type": "string"
      },
      {
        "name": "s3",
        "type": "string"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "\"aabcc\"\n\"dbbca\"\n\"aadbbcbcac\"\n\"aabcc\"\n\"dbbca\"\n\"aadbbbaccc\"\n\"\"\n\"\"\n\"\""
  },
  "98": {
    "name": "isValidBST",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "[2,1,3]\n[5,1,4,null,null,3,6]"
  },
  "99": {
    "name": "recoverTree",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "void"
    },
    "output": {
      "paramindex": 0
    },
    "exampleTestcases": "[1,3,null,null,2]\n[3,1,4,null,null,2]"
  },
  "100": {
    "name": "isSameTree",
    "params": [
      {
        "name": "p",
        "type": "TreeNode"
      },
      {
        "name": "q",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "[1,2,3]\n[1,2,3]\n[1,2]\n[1,null,2]\n[1,2,1]\n[1,1,2]"
  },
  "101": {
    "name": "isSymmetric",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "[1,2,2,3,4,4,3]\n[1,2,2,null,3,null,3]"
  },
  "102": {
    "name": "levelOrder",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "list<list<integer>>",
      "dealloc": true
    },
    "exampleTestcases": "[3,9,20,null,null,15,7]\n[1]\n[]"
  },
  "103": {
    "name": "zigzagLevelOrder",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "list<list<integer>>",
      "dealloc": true
    },
    "exampleTestcases": "[3,9,20,null,null,15,7]\n[1]\n[]",
    "exampleResult": "[[3],[20,9],[15,7]]\n[[1]]\n[]"
  },
  "104": {
    "name": "maxDepth",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[3,9,20,null,null,15,7]\n[1,null,2]\n[]\n[0]",
    "exampleResult": "3\n2\n0\n1"
  },
  "105": {
    "name": "buildTree",
    "params": [
      {
        "name": "preorder",
        "type": "integer[]"
      },
      {
        "name": "inorder",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "TreeNode",
      "dealloc": true
    },
    "exampleTestcases": "[3,9,20,15,7]\n[9,3,15,20,7]\n[-1]\n[-1]",
    "exampleResult": "[3,9,20,null,null,15,7]\n[-1]"
  },
  "106": {
    "name": "buildTree",
    "params": [
      {
        "name": "inorder",
        "type": "integer[]"
      },
      {
        "name": "postorder",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "TreeNode",
      "dealloc": true
    },
    "exampleTestcases": "[9,3,15,20,7]\n[9,15,7,20,3]\n[-1]\n[-1]"
  },
  "107": {
    "name": "levelOrderBottom",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "list<list<integer>>",
      "dealloc": true
    },
    "exampleTestcases": "[3,9,20,null,null,15,7]\n[1]\n[]"
  },
  "108": {
    "name": "sortedArrayToBST",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "TreeNode",
      "dealloc": true
    },
    "exampleTestcases": "[-10,-3,0,5,9]\n[1,3]"
  },
  "109": {
    "name": "sortedListToBST",
    "params": [
      {
        "name": "head",
        "type": "ListNode"
      }
    ],
    "return": {
      "type": "TreeNode",
      "dealloc": true
    },
    "exampleTestcases": "[-10,-3,0,5,9]\n[]\n[0]\n[1,3]"
  },
  "110": {
    "name": "isBalanced",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "[3,9,20,null,null,15,7]\n[1,2,2,3,3,null,null,4,4]\n[]"
  },
  "111": {
    "name": "minDepth",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[3,9,20,null,null,15,7]\n[2,null,3,null,4,null,5,null,6]",
    "exampleResult": "2\n5"
  },
  "112": {
    "name": "hasPathSum",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      },
      {
        "name": "targetSum",
        "type": "integer"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "[5,4,8,11,null,13,4,7,2,null,null,null,1]\n22\n[1,2,3]\n5\n[1,2]\n0"
  },
  "113": {
    "name": "pathSum",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      },
      {
        "name": "targetSum",
        "type": "integer"
      }
    ],
    "return": {
      "type": "list<list<integer>>",
      "dealloc": true
    },
    "exampleTestcases": "[5,4,8,11,null,13,4,7,2,null,null,5,1]\n22\n[1,2,3]\n5\n[1,2]\n0"
  },
  "114": {
    "name": "flatten",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "void"
    },
    "output": {
      "paramindex": 0
    },
    "exampleTestcases": "[1,2,5,3,4,null,6]\n[]\n[0]"
  },
  "115": {
    "name": "numDistinct",
    "params": [
      {
        "name": "s",
        "type": "string"
      },
      {
        "name": "t",
        "type": "string"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "\"rabbbit\"\n\"rabbit\"\n\"babgbag\"\n\"bag\""
  },
  "116": {
    "name": "connect",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "TreeNode"
    },
    "structures": [
      {
        "name": "TreeNode",
        "comment": "Definition for a Node.",
        "members": [
          {
            "name": "val",
            "type": "integer"
          },
          {
            "name": "left",
            "type": "TreeNode"
          },
          {
            "name": "right",
            "type": "TreeNode"
          },
          {
            "name": "next",
            "type": "TreeNode"
          }
        ]
      }
    ],
    "languages": [
      "cpp",
      "java",
      "python",
      "csharp",
      "javascript",
      "python3",
      "swift",
      "golang",
      "kotlin",
      "ruby",
      "c",
      "scala",
      "php",
      "typescript"
    ],
    "manual": true,
    "exampleTestcases": "[1,2,3,4,5,6,7]"
  },
  "117": {
    "name": "connect",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "TreeNode"
    },
    "languages": [
      "cpp",
      "java",
      "python",
      "csharp",
      "javascript",
      "python3",
      "golang",
      "swift",
      "kotlin",
      "ruby",
      "c",
      "scala",
      "php",
      "typescript"
    ],
    "manual": true,
    "exampleTestcases": "[1,2,3,4,5,null,7]"
  },
  "118": {
    "name": "generate",
    "params": [
      {
        "name": "numRows",
        "type": "integer"
      }
    ],
    "return": {
      "type": "list<list<integer>>",
      "dealloc": true,
      "rowsize": "param_1"
    },
    "exampleTestcases": "5\n1"
  },
  "119": {
    "name": "getRow",
    "params": [
      {
        "name": "rowIndex",
        "type": "integer"
      }
    ],
    "return": {
      "type": "list<integer>"
    },
    "exampleTestcases": "3\n0\n1"
  },
  "120": {
    "name": "minimumTotal",
    "params": [
      {
        "name": "triangle",
        "type": "list<list<integer>>"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[[2],[3,4],[6,5,7],[4,1,8,3]]\n[[-10]]"
  },
  "121": {
    "name": "maxProfit",
    "params": [
      {
        "name": "prices",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[7,1,5,3,6,4]\n[7,6,4,3,1]"
  },
  "122": {
    "name": "maxProfit",
    "params": [
      {
        "name": "prices",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[7,1,5,3,6,4]\n[1,2,3,4,5]\n[7,6,4,3,1]"
  },
  "123": {
    "name": "maxProfit",
    "params": [
      {
        "name": "prices",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[3,3,5,0,0,3,1,4]\n[1,2,3,4,5]\n[7,6,4,3,1]\n[1]"
  },
  "124": {
    "name": "maxPathSum",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[1,2,3]\n[-10,9,20,null,null,15,7]"
  },
  "125": {
    "name": "isPalindrome",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "\"A man, a plan, a canal: Panama\"\n\"race a car\""
  },
  "126": {
    "name": "findLadders",
    "params": [
      {
        "name": "beginWord",
        "type": "string"
      },
      {
        "name": "endWord",
        "type": "string"
      },
      {
        "name": "wordList",
        "type": "list<string>"
      }
    ],
    "return": {
      "type": "list<list<string>>"
    },
    "exampleTestcases": "\"hit\"\n\"cog\"\n[\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\n\"hit\"\n\"cog\"\n[\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]"
  },
  "127": {
    "name": "ladderLength",
    "params": [
      {
        "name": "beginWord",
        "type": "string"
      },
      {
        "name": "endWord",
        "type": "string"
      },
      {
        "name": "wordList",
        "type": "list<string>"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "\"hit\"\n\"cog\"\n[\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\n\"hit\"\n\"cog\"\n[\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]"
  },
  "128": {
    "name": "longestConsecutive",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[100,4,200,1,3,2]\n[0,3,7,2,5,8,4,6,0,1]"
  },
  "129": {
    "name": "sumNumbers",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[1,2,3]\n[4,9,0,5,1]"
  },
  "130": {
    "name": "solve",
    "params": [
      {
        "name": "board",
        "type": "character[][]"
      }
    ],
    "return": {
      "type": "void"
    },
    "output": {
      "paramindex": 0
    },
    "exampleTestcases": "[[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"O\",\"X\"],[\"X\",\"X\",\"O\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]\n[[\"X\"]]"
  },
  "131": {
    "name": "partition",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "list<list<string>>",
      "dealloc": true
    },
    "exampleTestcases": "\"aab\"\n\"a\""
  },
  "132": {
    "name": "minCut",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "\"aab\"\n\"a\"\n\"ab\""
  },
  "133": {
    "name": "cloneGraph",
    "params": [
      {
        "name": "edges",
        "type": "integer[][]"
      },
      {
        "type": "integer",
        "name": "source"
      },
      {
        "type": "integer",
        "name": "destination"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "languages": [
      "cpp",
      "java",
      "python",
      "csharp",
      "javascript",
      "python3",
      "golang",
      "swift",
      "kotlin",
      "ruby",
      "c",
      "scala",
      "php",
      "typescript"
    ],
    "manual": true,
    "exampleTestcases": "[[2,4],[1,3],[2,4],[1,3]]\n[[]]\n[]\n[[2],[1]]\n[[2,3],[1,3],[1,2]]\n[[2,3,4],[1,3,4],[1,2,4],[1,2,3]]\n[[2,3,4,5],[1,3,4,5],[1,2,4,5],[1,2,3,5],[1,2,3,4]]\n[[2,3,4,5,6],[1,3,4,5,6],[1,2,4,5,6],[1,2,3,5,6],[1,2,3,4,6],[1,2,3,4,5]]\n[[2,3,4,5,6,7],[1,3,4,5,6,7],[1,2,4,5,6,7],[1,2,3,5,6,7],[1,2,3,4,6,7],[1,2,3,4,5,7],[1,2,3,4,5,6]]\n[[2,3,4,5,6,7,8],[1,3,4,5,6,7,8],[1,2,4,5,6,7,8],[1,2,3,5,6,7,8],[1,2,3,4,6,7,8],[1,2,3,4,5,7,8],[1,2,3,4,5,6,8],[1,2,3,4,5,6,7]]\n[[2,3,4,5,6,7,8,9],[1,3,4,5,6,7,8,9],[1,2,4,5,6,7,8,9],[1,2,3,5,6,7,8,9],[1,2,3,4,6,7,8,9],[1,2,3,4,5,7,8,9],[1,2,3,4,5,6,8,9],[1,2,3,4,5,6,7,9],[1,2,3,4,5,6,7,8]]\n[[2,3,4,5,6,7,8,9,10],[1,3,4,5,6,7,8,9,10],[1,2,4,5,6,7,8,9,10],[1,2,3,5,6,7,8,9,10],[1,2,3,4,6,7,8,9,10],[1,2,3,4,5,7,8,9,10],[1,2,3,4,5,6,8,9,10],[1,2,3,4,5,6,7,9,10],[1,2,3,4,5,6,7,8,10],[1,2,3,4,5,6,7,8,9]]"
  },
  "134": {
    "name": "canCompleteCircuit",
    "params": [
      {
        "name": "gas",
        "type": "integer[]"
      },
      {
        "name": "cost",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[1,2,3,4,5]\n[3,4,5,1,2]\n[2,3,4]\n[3,4,3]"
  },
  "135": {
    "name": "candy",
    "params": [
      {
        "name": "ratings",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[1,0,2]\n[1,2,2]"
  },
  "136": {
    "name": "singleNumber",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[2,2,1]\n[4,1,2,1,2]\n[1]"
  },
  "137": {
    "name": "singleNumber",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[2,2,3,2]\n[0,1,0,1,0,1,99]"
  },
  "138": {
    "name": "copyRandomList",
    "params": [
      {
        "name": "head",
        "type": "ListNode"
      }
    ],
    "return": {
      "type": "ListNode"
    },
    "languages": [
      "cpp",
      "java",
      "python",
      "csharp",
      "javascript",
      "python3",
      "golang",
      "swift",
      "kotlin",
      "ruby",
      "c",
      "scala",
      "php",
      "typescript"
    ],
    "manual": true,
    "exampleTestcases": "[[7,null],[13,0],[11,4],[10,2],[1,0]]\n[[1,1],[2,1]]\n[[3,null],[3,0],[3,null]]\n[]"
  },
  "139": {
    "name": "wordBreak",
    "params": [
      {
        "name": "s",
        "type": "string"
      },
      {
        "name": "wordDict",
        "type": "list<string>"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "\"leetcode\"\n[\"leet\",\"code\"]\n\"applepenapple\"\n[\"apple\",\"pen\"]\n\"catsandog\"\n[\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]"
  },
  "140": {
    "name": "wordBreak",
    "params": [
      {
        "name": "s",
        "type": "string"
      },
      {
        "name": "wordDict",
        "type": "list<string>"
      }
    ],
    "return": {
      "type": "list<string>",
      "dealloc": true
    },
    "exampleTestcases": "\"catsanddog\"\n[\"cat\",\"cats\",\"and\",\"sand\",\"dog\"]\n\"pineapplepenapple\"\n[\"apple\",\"pen\",\"applepen\",\"pine\",\"pineapple\"]\n\"catsandog\"\n[\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]"
  },
  "141": {
    "name": "hasCycle",
    "params": [
      {
        "name": "head",
        "type": "ListNode"
      },
      {
        "name": "pos",
        "type": "integer"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "manual": true,
    "languages": [
      "cpp",
      "java",
      "python",
      "c",
      "csharp",
      "javascript",
      "ruby",
      "swift",
      "golang",
      "python3",
      "scala",
      "kotlin",
      "php",
      "typescript"
    ],
    "exampleTestcases": "[3,2,0,-4]\n1\n[1,2]\n0\n[1]\n-1"
  },
  "142": {
    "name": "detectCycle",
    "params": [
      {
        "name": "head",
        "type": "ListNode"
      },
      {
        "name": "pos",
        "type": "integer"
      }
    ],
    "return": {
      "type": "ListNode"
    },
    "languages": [
      "cpp",
      "java",
      "python",
      "c",
      "csharp",
      "javascript",
      "golang",
      "python3",
      "swift",
      "kotlin",
      "php",
      "ruby",
      "scala",
      "typescript"
    ],
    "manual": true,
    "exampleTestcases": "[3,2,0,-4]\n1\n[1,2]\n0\n[1]\n-1"
  },
  "143": {
    "name": "reorderList",
    "params": [
      {
        "name": "head",
        "type": "ListNode"
      }
    ],
    "return": {
      "type": "void"
    },
    "output": {
      "paramindex": 0
    },
    "exampleTestcases": "[1,2,3,4]\n[1,2,3,4,5]"
  },
  "144": {
    "name": "preorderTraversal",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "list<integer>",
      "dealloc": true
    },
    "exampleTestcases": "[1,null,2,3]\n[]\n[1]\n[1,2]\n[1,null,2]"
  },
  "145": {
    "name": "postorderTraversal",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "list<integer>",
      "dealloc": true
    },
    "exampleTestcases": "[1,null,2,3]\n[]\n[1]\n[1,2]\n[1,null,2]"
  },
  "146": {
    "classname": "LRUCache",
    "maxbytesperline": 200000,
    "constructor": {
      "params": [
        {
          "type": "integer",
          "name": "capacity"
        }
      ]
    },
    "methods": [
      {
        "name": "get",
        "params": [
          {
            "type": "integer",
            "name": "key"
          }
        ],
        "return": {
          "type": "integer"
        }
      },
      {
        "name": "put",
        "params": [
          {
            "type": "integer",
            "name": "key"
          },
          {
            "type": "integer",
            "name": "value"
          }
        ],
        "return": {
          "type": "void"
        }
      }
    ],
    "systemdesign": true,
    "params": [
      {
        "name": "inputs",
        "type": "integer[]"
      },
      {
        "name": "inputs",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "list<String>",
      "dealloc": true
    },
    "exampleTestcases": "[\"LRUCache\",\"put\",\"put\",\"get\",\"put\",\"get\",\"put\",\"get\",\"get\",\"get\"]\n[[2],[1,1],[2,2],[1],[3,3],[2],[4,4],[1],[3],[4]]"
  },
  "147": {
    "name": "insertionSortList",
    "params": [
      {
        "name": "head",
        "type": "ListNode",
        "dealloc": false
      }
    ],
    "return": {
      "type": "ListNode",
      "dealloc": true
    },
    "exampleTestcases": "[4,2,1,3]\n[-1,5,3,4,0]"
  },
  "148": {
    "name": "sortList",
    "params": [
      {
        "name": "head",
        "type": "ListNode",
        "dealloc": false
      }
    ],
    "return": {
      "type": "ListNode",
      "dealloc": true
    },
    "exampleTestcases": "[4,2,1,3]\n[-1,5,3,4,0]\n[]"
  },
  "149": {
    "name": "maxPoints",
    "params": [
      {
        "name": "points",
        "type": "integer[][]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[[1,1],[2,2],[3,3]]\n[[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]"
  },
  "150": {
    "name": "evalRPN",
    "params": [
      {
        "name": "tokens",
        "type": "string[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[\"2\",\"1\",\"+\",\"3\",\"*\"]\n[\"4\",\"13\",\"5\",\"/\",\"+\"]\n[\"10\",\"6\",\"9\",\"3\",\"+\",\"-11\",\"*\",\"/\",\"*\",\"17\",\"+\",\"5\",\"+\"]"
  },
  "151": {
    "name": "reverseWords",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": "\"the sky is blue\"\n\"  hello world  \"\n\"a good   example\"\n\"  Bob    Loves  Alice   \"\n\"Alice does not even like bob\""
  },
  "152": {
    "name": "maxProduct",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[2,3,-2,4]\n[-2,0,-1]\n[0,2]\n[-4,-3,-2]",
    "exampleResult": "6\n0\n2\n12"
  },
  "153": {
    "name": "findMin",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[3,4,5,1,2]\n[4,5,6,7,0,1,2]\n[11,13,15,17]"
  },
  "154": {
    "name": "findMin",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[1,3,5]\n[2,2,2,0,1]"
  },
  "155": {
    "classname": "MinStack",
    "maxbytesperline": 130000,
    "constructor": {
      "params": [
        {
          "type": "integer",
          "name": "maxSize",
          "lang": "c",
          "value": "64000"
        }
      ],
      "comment": "initialize your data structure here."
    },
    "methods": [
      {
        "name": "push",
        "params": [
          {
            "type": "integer",
            "name": "x"
          }
        ],
        "return": {
          "type": "void"
        }
      },
      {
        "name": "pop",
        "params": [],
        "return": {
          "type": "void"
        }
      },
      {
        "name": "top",
        "params": [],
        "return": {
          "type": "integer"
        }
      },
      {
        "name": "getMin",
        "params": [],
        "return": {
          "type": "integer"
        }
      }
    ],
    "systemdesign": true,
    "params": [
      {
        "name": "inputs",
        "type": "integer[]"
      },
      {
        "name": "inputs",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "list<String>",
      "dealloc": true
    },
    "exampleTestcases": "[\"MinStack\",\"push\",\"push\",\"push\",\"getMin\",\"pop\",\"top\",\"getMin\"]\n[[],[-2],[0],[-3],[],[],[],[]]"
  },
  "160": {
    "name": "getIntersectionNode",
    "params": [
      {
        "name": "intersectVal",
        "type": "integer"
      },
      {
        "name": "listA",
        "type": "ListNode"
      },
      {
        "name": "listB",
        "type": "ListNode"
      },
      {
        "name": "skipA",
        "type": "integer"
      },
      {
        "name": "skipB",
        "type": "integer"
      }
    ],
    "return": {
      "type": "ListNode"
    },
    "languages": [
      "cpp",
      "java",
      "python",
      "c",
      "csharp",
      "javascript",
      "golang",
      "python3",
      "swift",
      "ruby",
      "kotlin",
      "scala",
      "php",
      "typescript"
    ],
    "manual": true,
    "exampleTestcases": "8\n[4,1,8,4,5]\n[5,6,1,8,4,5]\n2\n3\n2\n[1,9,1,2,4]\n[3,2,4]\n3\n1\n0\n[2,6,4]\n[1,5]\n3\n2"
  },
  "162": {
    "name": "findPeakElement",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[1,2,3,1]\n[1,2,1,3,5,6,4]"
  },
  "164": {
    "name": "maximumGap",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[3,6,9,1]\n[10]"
  },
  "165": {
    "name": "compareVersion",
    "params": [
      {
        "name": "version1",
        "type": "string"
      },
      {
        "name": "version2",
        "type": "string"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "\"1.01\"\n\"1.001\"\n\"1.0\"\n\"1.0.0\"\n\"0.1\"\n\"1.1\"\n\"1.0.1\"\n\"1\"\n\"7.5.2.4\"\n\"7.5.3\""
  },
  "166": {
    "name": "fractionToDecimal",
    "params": [
      {
        "name": "numerator",
        "type": "integer"
      },
      {
        "name": "denominator",
        "type": "integer"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": "1\n2\n2\n1\n2\n3\n4\n333\n1\n5"
  },
  "167": {
    "name": "twoSum",
    "params": [
      {
        "name": "numbers",
        "type": "integer[]"
      },
      {
        "name": "target",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer[]"
    },
    "exampleTestcases": "[2,7,11,15]\n9\n[2,3,4]\n6\n[-1,0]\n-1"
  },
  "168": {
    "name": "convertToTitle",
    "params": [
      {
        "name": "columnNumber",
        "type": "integer"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": "1\n28\n701\n2147483647"
  },
  "169": {
    "name": "majorityElement",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[3,2,3]\n[2,2,1,1,1,2,2]"
  },
  "171": {
    "name": "titleToNumber",
    "params": [
      {
        "name": "columnTitle",
        "type": "string"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "\"A\"\n\"AB\"\n\"ZY\"\n\"FXSHRXW\""
  },
  "172": {
    "name": "trailingZeroes",
    "params": [
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "3\n5\n0"
  },
  "173": {
    "classname": "BSTIterator",
    "maxbytesperline": 200000,
    "constructor": {
      "params": [
        {
          "type": "TreeNode",
          "name": "root"
        }
      ]
    },
    "methods": [
      {
        "params": [],
        "name": "next",
        "return": {
          "type": "integer"
        }
      },
      {
        "params": [],
        "name": "hasNext",
        "return": {
          "type": "boolean"
        }
      }
    ],
    "systemdesign": true,
    "params": [
      {
        "name": "inputs",
        "type": "integer[]"
      },
      {
        "name": "inputs",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer[]",
      "dealloc": true
    },
    "manual": false,
    "exampleTestcases": "[\"BSTIterator\",\"next\",\"next\",\"hasNext\",\"next\",\"hasNext\",\"next\",\"hasNext\",\"next\",\"hasNext\"]\n[[[7,3,15,null,null,9,20]],[],[],[],[],[],[],[],[],[]]"
  },
  "174": {
    "name": "calculateMinimumHP",
    "params": [
      {
        "name": "dungeon",
        "type": "integer[][]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": ""
  },
  "179": {
    "name": "largestNumber",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": "[10,2]\n[3,30,34,5,9]\n[1]\n[10]"
  },
  "187": {
    "name": "findRepeatedDnaSequences",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "list<string>"
    },
    "exampleTestcases": "\"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\"\n\"AAAAAAAAAAAAA\""
  },
  "188": {
    "name": "maxProfit",
    "params": [
      {
        "name": "k",
        "type": "integer"
      },
      {
        "name": "prices",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "2\n[2,4,1]\n2\n[3,2,6,5,0,3]"
  },
  "189": {
    "name": "rotate",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      },
      {
        "name": "k",
        "type": "integer"
      }
    ],
    "return": {
      "type": "void"
    },
    "output": {
      "paramindex": 0
    },
    "exampleTestcases": "[1,2,3,4,5,6,7]\n3\n[-1,-100,3,99]\n2"
  },
  "190": {
    "name": "reverseBits",
    "params": [
      {
        "name": "n",
        "type": "string"
      }
    ],
    "return": {
      "type": "integer"
    },
    "manual": true,
    "exampleTestcases": "00000010100101000001111010011100\n11111111111111111111111111111101"
  },
  "191": {
    "name": "hammingWeight",
    "params": [
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "manual": true,
    "exampleTestcases": "00000000000000000000000000001011\n00000000000000000000000010000000\n11111111111111111111111111111101"
  },
  "198": {
    "name": "rob",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[1,2,3,1]\n[2,7,9,3,1]"
  },
  "199": {
    "name": "rightSideView",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "list<integer>",
      "dealloc": true
    },
    "exampleTestcases": "[1,2,3,null,5,null,4]\n[1,null,3]\n[]"
  },
  "200": {
    "name": "numIslands",
    "params": [
      {
        "name": "grid",
        "type": "character[][]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]\n[[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"1\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"1\",\"1\"]]"
  },
  "201": {
    "name": "rangeBitwiseAnd",
    "params": [
      {
        "name": "left",
        "type": "integer"
      },
      {
        "name": "right",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "5\n7\n0\n0\n1\n2147483647"
  },
  "202": {
    "name": "isHappy",
    "params": [
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "19\n2"
  },
  "203": {
    "name": "removeElements",
    "params": [
      {
        "name": "head",
        "type": "ListNode",
        "dealloc": false
      },
      {
        "name": "val",
        "type": "integer"
      }
    ],
    "return": {
      "type": "ListNode",
      "dealloc": true
    },
    "exampleTestcases": "[1,2,6,3,4,5,6]\n6\n[]\n1\n[7,7,7,7]\n7"
  },
  "204": {
    "name": "countPrimes",
    "params": [
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "10\n0\n1"
  },
  "205": {
    "name": "isIsomorphic",
    "params": [
      {
        "name": "s",
        "type": "string"
      },
      {
        "name": "t",
        "type": "string"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "\"egg\"\n\"add\"\n\"foo\"\n\"bar\"\n\"paper\"\n\"title\""
  },
  "206": {
    "name": "reverseList",
    "params": [
      {
        "name": "head",
        "type": "ListNode",
        "dealloc": false
      }
    ],
    "return": {
      "type": "ListNode",
      "dealloc": true
    },
    "exampleTestcases": "[1,2,3,4,5]\n[1,2]\n[]",
    "exampleResult": "[5,4,3,2,1]\n[2,1]\n[]"
  },
  "207": {
    "name": "canFinish",
    "params": [
      {
        "name": "numCourses",
        "type": "integer"
      },
      {
        "name": "prerequisites",
        "type": "integer[][]"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "2\n[[1,0]]\n2\n[[1,0],[0,1]]"
  },
  "208": {
    "classname": "Trie",
    "maxbytesperline": 210000,
    "constructor": {
      "params": [],
      "comment": "Initialize your data structure here."
    },
    "methods": [
      {
        "name": "insert",
        "params": [
          {
            "type": "string",
            "name": "word"
          }
        ],
        "return": {
          "type": "void"
        },
        "comment": "Inserts a word into the trie."
      },
      {
        "name": "search",
        "params": [
          {
            "type": "string",
            "name": "word"
          }
        ],
        "return": {
          "type": "boolean"
        },
        "comment": "Returns if the word is in the trie."
      },
      {
        "name": "startsWith",
        "params": [
          {
            "type": "string",
            "name": "prefix"
          }
        ],
        "return": {
          "type": "boolean"
        },
        "comment": "Returns if there is any word in the trie that starts with the given prefix."
      }
    ],
    "systemdesign": true,
    "params": [
      {
        "name": "inputs",
        "type": "integer[]"
      },
      {
        "name": "inputs",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "list<String>",
      "dealloc": true
    },
    "exampleTestcases": "[\"Trie\",\"insert\",\"search\",\"search\",\"startsWith\",\"insert\",\"search\"]\n[[],[\"apple\"],[\"apple\"],[\"app\"],[\"app\"],[\"app\"],[\"app\"]]"
  },
  "209": {
    "name": "minSubArrayLen",
    "params": [
      {
        "name": "target",
        "type": "integer"
      },
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "7\n[2,3,1,2,4,3]\n4\n[1,4,4]\n11\n[1,1,1,1,1,1,1,1]"
  },
  "210": {
    "name": "findOrder",
    "params": [
      {
        "name": "numCourses",
        "type": "integer"
      },
      {
        "name": "prerequisites",
        "type": "integer[][]"
      }
    ],
    "return": {
      "type": "integer[]"
    },
    "exampleTestcases": "2\n[[1,0]]\n4\n[[1,0],[2,0],[3,1],[3,2]]\n1\n[]"
  },
  "211": {
    "classname": "WordDictionary",
    "maxbytesperline": 400000,
    "constructor": {
      "params": [],
      "comment": "Initialize your data structure here."
    },
    "methods": [
      {
        "params": [
          {
            "type": "string",
            "name": "word"
          }
        ],
        "name": "addWord",
        "return": {
          "type": "void"
        }
      },
      {
        "params": [
          {
            "type": "string",
            "name": "word"
          }
        ],
        "name": "search",
        "return": {
          "type": "boolean"
        }
      }
    ],
    "systemdesign": true,
    "params": [
      {
        "name": "inputs",
        "type": "integer[]"
      },
      {
        "name": "inputs",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "list<String>",
      "dealloc": true
    },
    "exampleTestcases": "[\"WordDictionary\",\"addWord\",\"addWord\",\"addWord\",\"search\",\"search\",\"search\",\"search\"]\n[[],[\"bad\"],[\"dad\"],[\"mad\"],[\"pad\"],[\"bad\"],[\".ad\"],[\"b..\"]]"
  },
  "212": {
    "name": "findWords",
    "params": [
      {
        "name": "board",
        "type": "character[][]"
      },
      {
        "name": "words",
        "type": "string[]"
      }
    ],
    "return": {
      "type": "list<string>"
    },
    "exampleTestcases": "[[\"o\",\"a\",\"a\",\"n\"],[\"e\",\"t\",\"a\",\"e\"],[\"i\",\"h\",\"k\",\"r\"],[\"i\",\"f\",\"l\",\"v\"]]\n[\"oath\",\"pea\",\"eat\",\"rain\"]\n[[\"a\",\"b\"],[\"c\",\"d\"]]\n[\"abcb\"]"
  },
  "213": {
    "name": "rob",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[2,3,2]\n[1,2,3,1]\n[0]"
  },
  "214": {
    "name": "shortestPalindrome",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": "\"aacecaaa\"\n\"abcd\""
  },
  "215": {
    "name": "findKthLargest",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      },
      {
        "name": "k",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[3,2,1,5,6,4]\n2\n[3,2,3,1,2,4,5,5,6]\n4"
  },
  "216": {
    "name": "combinationSum3",
    "params": [
      {
        "name": "k",
        "type": "integer"
      },
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "list<list<integer>>",
      "dealloc": true
    },
    "exampleTestcases": "3\n7\n3\n9\n4\n1\n3\n2\n9\n45"
  },
  "217": {
    "name": "containsDuplicate",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "[1,2,3,1]\n[1,2,3,4]\n[1,1,1,3,3,4,3,2,4,2]"
  },
  "218": {
    "name": "getSkyline",
    "params": [
      {
        "name": "buildings",
        "type": "integer[][]"
      }
    ],
    "return": {
      "type": "list<list<integer>>",
      "colsize": 2,
      "dealloc": true
    },
    "exampleTestcases": "[[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]\n[[0,2,3],[2,5,3]]"
  },
  "219": {
    "name": "containsNearbyDuplicate",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      },
      {
        "name": "k",
        "type": "integer"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "[1,2,3,1]\n3\n[1,0,1,1]\n1\n[1,2,3,1,2,3]\n2"
  },
  "220": {
    "name": "containsNearbyAlmostDuplicate",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      },
      {
        "name": "k",
        "type": "integer"
      },
      {
        "name": "t",
        "type": "integer"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "[1,2,3,1]\n3\n0\n[1,0,1,1]\n1\n2\n[1,5,9,1,5,9]\n2\n3"
  },
  "221": {
    "name": "maximalSquare",
    "params": [
      {
        "name": "matrix",
        "type": "character[][]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]\n[[\"0\",\"1\"],[\"1\",\"0\"]]\n[[\"0\"]]"
  },
  "222": {
    "name": "countNodes",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[1,2,3,4,5,6]\n[]\n[1]"
  },
  "223": {
    "name": "computeArea",
    "params": [
      {
        "name": "A",
        "type": "integer"
      },
      {
        "name": "B",
        "type": "integer"
      },
      {
        "name": "C",
        "type": "integer"
      },
      {
        "name": "D",
        "type": "integer"
      },
      {
        "name": "E",
        "type": "integer"
      },
      {
        "name": "F",
        "type": "integer"
      },
      {
        "name": "G",
        "type": "integer"
      },
      {
        "name": "H",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "-3\n0\n3\n4\n0\n-1\n9\n2"
  },
  "224": {
    "name": "calculate",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "\"1 + 1\"\n\" 2-1 + 2 \"\n\"(1+(4+5+2)-3)+(6+8)\""
  },
  "225": {
    "classname": "MyStack",
    "constructor": {
      "params": [
        {
          "type": "integer",
          "name": "maxSize",
          "lang": "c",
          "value": "64000"
        }
      ],
      "comment": "Initialize your data structure here."
    },
    "methods": [
      {
        "name": "push",
        "params": [
          {
            "type": "integer",
            "name": "x"
          }
        ],
        "return": {
          "type": "void"
        },
        "comment": "Push element x onto stack."
      },
      {
        "name": "pop",
        "params": [],
        "return": {
          "type": "integer"
        },
        "comment": "Removes the element on top of the stack and returns that element."
      },
      {
        "name": "top",
        "params": [],
        "return": {
          "type": "integer"
        },
        "comment": "Get the top element."
      },
      {
        "name": "empty",
        "params": [],
        "return": {
          "type": "boolean"
        },
        "comment": "Returns whether the stack is empty."
      }
    ],
    "systemdesign": true,
    "params": [
      {
        "name": "inputs",
        "type": "integer[]"
      },
      {
        "name": "inputs",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "list<String>",
      "dealloc": true
    },
    "exampleTestcases": "[\"MyStack\",\"push\",\"push\",\"top\",\"pop\",\"empty\"]\n[[],[1],[2],[],[],[]]"
  },
  "226": {
    "name": "invertTree",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "TreeNode"
    },
    "exampleTestcases": "[4,2,7,1,3,6,9]\n[2,1,3]\n[]",
    "exampleResult": "[4,7,2,9,6,3,1]\n[2,3,1]\n[]"
  },
  "227": {
    "name": "calculate",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "\"3+2*2\"\n\" 3/2 \"\n\" 3+5 / 2 \""
  },
  "228": {
    "name": "summaryRanges",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "list<string>"
    },
    "exampleTestcases": "[0,1,2,4,5,7]\n[0,2,3,4,6,8,9]\n[]\n[-1]\n[0]"
  },
  "229": {
    "name": "majorityElement",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "list<integer>"
    },
    "exampleTestcases": "[3,2,3]\n[1]\n[1,2]"
  },
  "230": {
    "name": "kthSmallest",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      },
      {
        "name": "k",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[3,1,4,null,2]\n1\n[5,3,6,2,4,null,null,1]\n3"
  },
  "231": {
    "name": "isPowerOfTwo",
    "params": [
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "1\n16\n3\n4\n5"
  },
  "232": {
    "classname": "MyQueue",
    "constructor": {
      "params": [
        {
          "type": "integer",
          "name": "maxSize",
          "lang": "c",
          "value": "64000"
        }
      ],
      "comment": "Initialize your data structure here."
    },
    "methods": [
      {
        "name": "push",
        "params": [
          {
            "type": "integer",
            "name": "x"
          }
        ],
        "return": {
          "type": "void"
        },
        "comment": "Push element x to the back of queue."
      },
      {
        "name": "pop",
        "params": [],
        "return": {
          "type": "integer"
        },
        "comment": "Removes the element from in front of queue and returns that element."
      },
      {
        "name": "peek",
        "params": [],
        "return": {
          "type": "integer"
        },
        "comment": "Get the front element."
      },
      {
        "name": "empty",
        "params": [],
        "return": {
          "type": "boolean"
        },
        "comment": "Returns whether the queue is empty."
      }
    ],
    "systemdesign": true,
    "params": [
      {
        "name": "inputs",
        "type": "integer[]"
      },
      {
        "name": "inputs",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "list<String>",
      "dealloc": true
    },
    "exampleTestcases": "[\"MyQueue\",\"push\",\"push\",\"peek\",\"pop\",\"empty\"]\n[[],[1],[2],[],[],[]]"
  },
  "233": {
    "name": "countDigitOne",
    "params": [
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "13\n0"
  },
  "234": {
    "name": "isPalindrome",
    "params": [
      {
        "name": "head",
        "type": "ListNode"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "[1,2,2,1]\n[1,2]"
  },
  "235": {
    "name": "lowestCommonAncestor",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      },
      {
        "name": "p",
        "type": "integer"
      },
      {
        "name": "q",
        "type": "integer"
      }
    ],
    "return": {
      "type": "TreeNode"
    },
    "manual": true,
    "exampleTestcases": "[6,2,8,0,4,7,9,null,null,3,5]\n2\n8\n[6,2,8,0,4,7,9,null,null,3,5]\n2\n4\n[2,1]\n2\n1"
  },
  "236": {
    "name": "lowestCommonAncestor",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      },
      {
        "name": "p",
        "type": "integer"
      },
      {
        "name": "q",
        "type": "integer"
      }
    ],
    "return": {
      "type": "TreeNode"
    },
    "manual": true,
    "exampleTestcases": "[3,5,1,6,2,0,8,null,null,7,4]\n5\n1\n[3,5,1,6,2,0,8,null,null,7,4]\n5\n4\n[1,2]\n1\n2",
    "exampleResult": "[]\n[]\n[]"
  },
  "237": {
    "name": "deleteNode",
    "params": [
      {
        "name": "head",
        "type": "ListNode"
      },
      {
        "name": "node",
        "type": "integer"
      }
    ],
    "return": {
      "type": "void"
    },
    "output": {
      "paramindex": 0
    },
    "manual": true,
    "languages": [
      "cpp",
      "java",
      "python",
      "c",
      "csharp",
      "javascript",
      "ruby",
      "swift",
      "golang",
      "python3",
      "scala",
      "kotlin",
      "php",
      "typescript"
    ],
    "exampleTestcases": "[4,5,1,9]\n5\n[4,5,1,9]\n1\n[1,2,3,4]\n3\n[0,1]\n0\n[-3,5,-99]\n-3"
  },
  "238": {
    "name": "productExceptSelf",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer[]"
    },
    "exampleTestcases": ""
  },
  "239": {
    "name": "maxSlidingWindow",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      },
      {
        "name": "k",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer[]"
    },
    "exampleTestcases": "[1,3,-1,-3,5,3,6,7]\n3\n[1]\n1\n[1,-1]\n1\n[9,11]\n2\n[4,-2]\n2",
    "exampleResult": "[3,3,5,5,6,7]\n[1]\n[1,-1]\n[11]\n[4]"
  },
  "240": {
    "name": "searchMatrix",
    "params": [
      {
        "name": "matrix",
        "type": "integer[][]"
      },
      {
        "name": "target",
        "type": "integer"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "manual": true,
    "exampleTestcases": "[[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]]\n5\n[[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]]\n20"
  },
  "241": {
    "name": "diffWaysToCompute",
    "params": [
      {
        "name": "expression",
        "type": "string"
      }
    ],
    "return": {
      "type": "list<integer>"
    },
    "exampleTestcases": "\"2-1-1\"\n\"2*3-4*5\""
  },
  "242": {
    "name": "isAnagram",
    "params": [
      {
        "name": "s",
        "type": "string"
      },
      {
        "name": "t",
        "type": "string"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "\"anagram\"\n\"nagaram\"\n\"rat\"\n\"car\""
  },
  "257": {
    "name": "binaryTreePaths",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "list<string>",
      "dealloc": true
    },
    "exampleTestcases": "[1,2,3,null,5]\n[1]"
  },
  "258": {
    "name": "addDigits",
    "params": [
      {
        "name": "num",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "38\n0"
  },
  "260": {
    "name": "singleNumber",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer[]"
    },
    "exampleTestcases": "[1,2,1,3,2,5]\n[-1,0]\n[0,1]"
  },
  "263": {
    "name": "isUgly",
    "params": [
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "6\n8\n14\n1"
  },
  "264": {
    "name": "nthUglyNumber",
    "params": [
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "10\n1",
    "exampleResult": "12\n1"
  },
  "268": {
    "name": "missingNumber",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[3,0,1]\n[0,1]\n[9,6,4,2,3,5,7,0,1]\n[0]"
  },
  "273": {
    "name": "numberToWords",
    "params": [
      {
        "name": "num",
        "type": "integer"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": "123\n12345\n1234567\n1234567891"
  },
  "274": {
    "name": "hIndex",
    "params": [
      {
        "name": "citations",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[3,0,6,1,5]\n[1,3,1]"
  },
  "275": {
    "name": "hIndex",
    "params": [
      {
        "name": "citations",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[0,1,3,5,6]\n[1,2,100]"
  },
  "278": {
    "name": "firstBadVersion",
    "params": [
      {
        "name": "n",
        "type": "integer"
      },
      {
        "name": "bad",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "manual": true,
    "exampleTestcases": "5\n4\n1\n1"
  },
  "279": {
    "name": "numSquares",
    "params": [
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "12\n13"
  },
  "282": {
    "name": "addOperators",
    "params": [
      {
        "name": "num",
        "type": "string"
      },
      {
        "name": "target",
        "type": "integer"
      }
    ],
    "return": {
      "type": "list<string>"
    },
    "exampleTestcases": "\"123\"\n6\n\"232\"\n8\n\"105\"\n5\n\"00\"\n0\n\"3456237490\"\n9191"
  },
  "283": {
    "name": "moveZeroes",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "void"
    },
    "output": {
      "paramindex": 0
    },
    "exampleTestcases": "[0,1,0,3,12]\n[0]"
  },
  "284": {
    "name": "PeekingIterator",
    "params": [
      {
        "name": "nums",
        "type": "list<integer>"
      },
      {
        "name": "commands",
        "type": "list<integer>"
      }
    ],
    "return": {
      "type": "list<string>",
      "dealloc": true
    },
    "languages": [
      "cpp",
      "java",
      "python",
      "python3",
      "csharp",
      "golang",
      "ruby",
      "kotlin",
      "scala",
      "swift",
      "php",
      "c",
      "javascript",
      "typescript"
    ],
    "manual": true,
    "exampleTestcases": "[\"PeekingIterator\",\"next\",\"peek\",\"next\",\"next\",\"hasNext\"]\n[[[1,2,3]],[],[],[],[],[]]"
  },
  "287": {
    "name": "findDuplicate",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[1,3,4,2,2]\n[3,1,3,4,2]\n[1,1]\n[1,1,2]"
  },
  "289": {
    "name": "gameOfLife",
    "params": [
      {
        "name": "board",
        "type": "integer[][]"
      }
    ],
    "return": {
      "type": "void"
    },
    "output": {
      "paramindex": 0
    },
    "exampleTestcases": "[[0,1,0],[0,0,1],[1,1,1],[0,0,0]]\n[[1,1],[1,0]]"
  },
  "290": {
    "name": "wordPattern",
    "params": [
      {
        "name": "pattern",
        "type": "string"
      },
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "\"abba\"\n\"dog cat cat dog\"\n\"abba\"\n\"dog cat cat fish\"\n\"aaaa\"\n\"dog cat cat dog\"\n\"abba\"\n\"dog dog dog dog\""
  },
  "292": {
    "name": "canWinNim",
    "params": [
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "4\n1\n2"
  },
  "295": {
    "classname": "MedianFinder",
    "maxbytesperline": 410000,
    "constructor": {
      "params": [],
      "comment": "initialize your data structure here."
    },
    "methods": [
      {
        "name": "addNum",
        "params": [
          {
            "type": "integer",
            "name": "num"
          }
        ],
        "return": {
          "type": "void"
        }
      },
      {
        "name": "findMedian",
        "params": [],
        "return": {
          "type": "double"
        }
      }
    ],
    "systemdesign": true,
    "params": [
      {
        "name": "inputs",
        "type": "integer[]"
      },
      {
        "name": "inputs",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "list<String>",
      "dealloc": true
    },
    "exampleTestcases": "[\"MedianFinder\",\"addNum\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\"]\n[[],[1],[2],[],[3],[]]"
  },
  "297": {
    "name": "Codec",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "string"
    },
    "manual": true,
    "exampleTestcases": "[1,2,3,null,null,4,5]\n[]\n[1]\n[1,2]"
  },
  "299": {
    "name": "getHint",
    "params": [
      {
        "name": "secret",
        "type": "string"
      },
      {
        "name": "guess",
        "type": "string"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": "\"1807\"\n\"7810\"\n\"1123\"\n\"0111\"\n\"1\"\n\"0\"\n\"1\"\n\"1\""
  },
  "300": {
    "name": "lengthOfLIS",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[10,9,2,5,3,7,101,18]\n[0,1,0,3,2,3]\n[7,7,7,7,7,7,7]"
  },
  "301": {
    "name": "removeInvalidParentheses",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "list<string>"
    },
    "exampleTestcases": "\"()())()\"\n\"(a)())()\"\n\")(\""
  },
  "303": {
    "classname": "NumArray",
    "maxbytesperline": 135000,
    "constructor": {
      "params": [
        {
          "type": "integer[]",
          "name": "nums"
        },
        {
          "type": "integer",
          "name": "numsSize",
          "lang": "c",
          "value": "size_1"
        }
      ]
    },
    "methods": [
      {
        "name": "sumRange",
        "params": [
          {
            "type": "integer",
            "name": "left"
          },
          {
            "type": "integer",
            "name": "right"
          }
        ],
        "return": {
          "type": "integer"
        }
      }
    ],
    "systemdesign": true,
    "params": [
      {
        "name": "inputs",
        "type": "integer[]"
      },
      {
        "name": "inputs",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "list<String>",
      "dealloc": true
    },
    "exampleTestcases": "[\"NumArray\",\"sumRange\",\"sumRange\",\"sumRange\"]\n[[[-2,0,3,-5,2,-1]],[0,2],[2,5],[0,5]]"
  },
  "304": {
    "classname": "NumMatrix",
    "maxbytesperline": 150000,
    "constructor": {
      "params": [
        {
          "type": "integer[][]",
          "name": "matrix"
        },
        {
          "type": "integer",
          "name": "matrixRowSize",
          "lang": "c",
          "value": "size_1"
        },
        {
          "type": "integer",
          "name": "matrixColSize",
          "lang": "c",
          "value": "col_size_1"
        }
      ]
    },
    "methods": [
      {
        "name": "sumRegion",
        "params": [
          {
            "type": "integer",
            "name": "row1"
          },
          {
            "type": "integer",
            "name": "col1"
          },
          {
            "type": "integer",
            "name": "row2"
          },
          {
            "type": "integer",
            "name": "col2"
          }
        ],
        "return": {
          "type": "integer"
        }
      }
    ],
    "systemdesign": true,
    "params": [
      {
        "name": "inputs",
        "type": "integer[]"
      },
      {
        "name": "inputs",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "list<String>",
      "dealloc": true
    },
    "exampleTestcases": "[\"NumMatrix\",\"sumRegion\",\"sumRegion\",\"sumRegion\"]\n[[[[3,0,1,4,2],[5,6,3,2,1],[1,2,0,1,5],[4,1,0,1,7],[1,0,3,0,5]]],[2,1,4,3],[1,1,2,2],[1,2,2,4]]"
  },
  "306": {
    "name": "isAdditiveNumber",
    "params": [
      {
        "name": "num",
        "type": "string"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "\"112358\"\n\"199100199\""
  },
  "307": {
    "classname": "NumArray",
    "maxbytesperline": 170000,
    "constructor": {
      "params": [
        {
          "type": "integer[]",
          "name": "nums"
        }
      ]
    },
    "methods": [
      {
        "name": "update",
        "params": [
          {
            "type": "integer",
            "name": "index"
          },
          {
            "type": "integer",
            "name": "val"
          }
        ],
        "return": {
          "type": "void"
        }
      },
      {
        "name": "sumRange",
        "params": [
          {
            "type": "integer",
            "name": "left"
          },
          {
            "type": "integer",
            "name": "right"
          }
        ],
        "return": {
          "type": "integer"
        }
      }
    ],
    "systemdesign": true,
    "params": [
      {
        "name": "inputs",
        "type": "integer[]"
      },
      {
        "name": "inputs",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "list<String>",
      "dealloc": true
    },
    "exampleTestcases": "[\"NumArray\",\"sumRange\",\"update\",\"sumRange\"]\n[[[1,3,5]],[0,2],[1,2],[0,2]]"
  },
  "309": {
    "name": "maxProfit",
    "params": [
      {
        "name": "prices",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[1,2,3,0,2]\n[1]"
  },
  "310": {
    "name": "findMinHeightTrees",
    "params": [
      {
        "name": "n",
        "type": "integer"
      },
      {
        "name": "edges",
        "type": "integer[][]"
      }
    ],
    "return": {
      "type": "list<integer>"
    },
    "exampleTestcases": "4\n[[1,0],[1,2],[1,3]]\n6\n[[3,0],[3,1],[3,2],[3,4],[5,4]]\n1\n[]\n2\n[[0,1]]"
  },
  "312": {
    "name": "maxCoins",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[3,1,5,8]\n[1,5]"
  },
  "313": {
    "name": "nthSuperUglyNumber",
    "params": [
      {
        "name": "n",
        "type": "integer"
      },
      {
        "name": "primes",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "12\n[2,7,13,19]\n1\n[2,3,5]"
  },
  "315": {
    "name": "countSmaller",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "list<integer>",
      "dealloc": true
    },
    "exampleTestcases": "[5,2,6,1]\n[-1]\n[-1,-1]"
  },
  "316": {
    "name": "removeDuplicateLetters",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": "\"bcabc\"\n\"cbacdcbc\""
  },
  "318": {
    "name": "maxProduct",
    "params": [
      {
        "name": "words",
        "type": "string[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[\"abcw\",\"baz\",\"foo\",\"bar\",\"xtfn\",\"abcdef\"]\n[\"a\",\"ab\",\"abc\",\"d\",\"cd\",\"bcd\",\"abcd\"]\n[\"a\",\"aa\",\"aaa\",\"aaaa\"]"
  },
  "319": {
    "name": "bulbSwitch",
    "params": [
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "3\n0\n1"
  },
  "321": {
    "name": "maxNumber",
    "params": [
      {
        "name": "nums1",
        "type": "integer[]"
      },
      {
        "name": "nums2",
        "type": "integer[]"
      },
      {
        "name": "k",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer[]"
    },
    "exampleTestcases": "[3,4,6,5]\n[9,1,2,5,8,3]\n5\n[6,7]\n[6,0,4]\n5\n[3,9]\n[8,9]\n3"
  },
  "322": {
    "name": "coinChange",
    "params": [
      {
        "name": "coins",
        "type": "integer[]"
      },
      {
        "name": "amount",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[1,2,5]\n11\n[2]\n3\n[1]\n0\n[1]\n1\n[1]\n2"
  },
  "324": {
    "name": "wiggleSort",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "void"
    },
    "output": {
      "paramindex": 0
    },
    "exampleTestcases": "[1,5,1,1,6,4]\n[1,3,2,2,3,1]"
  },
  "326": {
    "name": "isPowerOfThree",
    "params": [
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "27\n0\n9\n45"
  },
  "327": {
    "name": "countRangeSum",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      },
      {
        "name": "lower",
        "type": "integer"
      },
      {
        "name": "upper",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[-2,5,-1]\n-2\n2\n[0]\n0\n0"
  },
  "328": {
    "name": "oddEvenList",
    "params": [
      {
        "name": "head",
        "type": "ListNode",
        "dealloc": false
      }
    ],
    "return": {
      "type": "ListNode",
      "dealloc": true
    },
    "exampleTestcases": "[1,2,3,4,5]\n[2,1,3,5,6,4,7]"
  },
  "329": {
    "name": "longestIncreasingPath",
    "params": [
      {
        "name": "matrix",
        "type": "integer[][]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[[9,9,4],[6,6,8],[2,1,1]]\n[[3,4,5],[3,2,6],[2,2,1]]\n[[1]]"
  },
  "330": {
    "name": "minPatches",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      },
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[1,3]\n6\n[1,5,10]\n20\n[1,2,2]\n5"
  },
  "331": {
    "name": "isValidSerialization",
    "params": [
      {
        "name": "preorder",
        "type": "string"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "\"9,3,4,#,#,1,#,#,2,#,6,#,#\"\n\"1,#\"\n\"9,#,#,1\""
  },
  "332": {
    "name": "findItinerary",
    "params": [
      {
        "name": "tickets",
        "type": "list<list<string>>"
      }
    ],
    "return": {
      "type": "list<string>"
    },
    "exampleTestcases": "[[\"MUC\",\"LHR\"],[\"JFK\",\"MUC\"],[\"SFO\",\"SJC\"],[\"LHR\",\"SFO\"]]\n[[\"JFK\",\"SFO\"],[\"JFK\",\"ATL\"],[\"SFO\",\"ATL\"],[\"ATL\",\"JFK\"],[\"ATL\",\"SFO\"]]"
  },
  "334": {
    "name": "increasingTriplet",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "[1,2,3,4,5]\n[5,4,3,2,1]\n[2,1,5,0,4,6]"
  },
  "335": {
    "name": "isSelfCrossing",
    "params": [
      {
        "name": "distance",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "[2,1,1,2]\n[1,2,3,4]\n[1,1,1,1]"
  },
  "336": {
    "name": "palindromePairs",
    "params": [
      {
        "name": "words",
        "type": "string[]"
      }
    ],
    "return": {
      "type": "list<list<integer>>"
    },
    "exampleTestcases": "[\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"]\n[\"bat\",\"tab\",\"cat\"]\n[\"a\",\"\"]"
  },
  "337": {
    "name": "rob",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[3,2,3,null,3,null,1]\n[3,4,5,1,3,null,1]"
  },
  "338": {
    "name": "countBits",
    "params": [
      {
        "name": "num",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer[]"
    },
    "exampleTestcases": "2\n5"
  },
  "341": {
    "name": "",
    "params": [
      {
        "name": "nestedList",
        "type": "list<NestedInteger>"
      }
    ],
    "return": {
      "type": "integer"
    },
    "manual": true,
    "exampleTestcases": "[[1,1],2,[1,1]]\n[1,[4,[6]]]"
  },
  "342": {
    "name": "isPowerOfFour",
    "params": [
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "16\n5\n1"
  },
  "343": {
    "name": "integerBreak",
    "params": [
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "2\n10"
  },
  "344": {
    "name": "reverseString",
    "params": [
      {
        "name": "s",
        "type": "character[]"
      }
    ],
    "return": {
      "type": "void"
    },
    "output": {
      "paramindex": 0
    },
    "exampleTestcases": "[\"h\",\"e\",\"l\",\"l\",\"o\"]\n[\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"]"
  },
  "345": {
    "name": "reverseVowels",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": "\"hello\"\n\"leetcode\""
  },
  "347": {
    "name": "topKFrequent",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      },
      {
        "name": "k",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer[]"
    },
    "exampleTestcases": "[1,1,1,2,2,3]\n2\n[1]\n1",
    "exampleResult": "[1,2]\n[1]"
  },
  "349": {
    "name": "intersection",
    "params": [
      {
        "name": "nums1",
        "type": "integer[]"
      },
      {
        "name": "nums2",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer[]"
    },
    "exampleTestcases": "[1,2,2,1]\n[2,2]\n[4,9,5]\n[9,4,9,8,4]"
  },
  "350": {
    "name": "intersect",
    "params": [
      {
        "name": "nums1",
        "type": "integer[]"
      },
      {
        "name": "nums2",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer[]"
    },
    "exampleTestcases": "[1,2,2,1]\n[2,2]\n[4,9,5]\n[9,4,9,8,4]"
  },
  "352": {
    "classname": "SummaryRanges",
    "constructor": {
      "params": [],
      "comment": "Initialize your data structure here."
    },
    "methods": [
      {
        "name": "addNum",
        "params": [
          {
            "type": "integer",
            "name": "val"
          }
        ],
        "return": {
          "type": "void"
        }
      },
      {
        "name": "getIntervals",
        "params": [],
        "return": {
          "type": "integer[][]"
        }
      }
    ],
    "systemdesign": true,
    "params": [
      {
        "name": "inputs",
        "type": "integer[]"
      },
      {
        "name": "inputs",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "list<String>",
      "dealloc": true
    },
    "exampleTestcases": ""
  },
  "354": {
    "name": "maxEnvelopes",
    "params": [
      {
        "name": "envelopes",
        "type": "integer[][]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[[5,4],[6,4],[6,7],[2,3]]\n[[1,1],[1,1],[1,1]]"
  },
  "355": {
    "classname": "Twitter",
    "maxbytesperline": 170000,
    "constructor": {
      "params": [],
      "comment": "Initialize your data structure here."
    },
    "methods": [
      {
        "name": "postTweet",
        "params": [
          {
            "type": "integer",
            "name": "userId"
          },
          {
            "type": "integer",
            "name": "tweetId"
          }
        ],
        "return": {
          "type": "void"
        },
        "comment": "Compose a new tweet."
      },
      {
        "name": "getNewsFeed",
        "params": [
          {
            "type": "integer",
            "name": "userId"
          }
        ],
        "return": {
          "type": "list<integer>"
        },
        "comment": "Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent."
      },
      {
        "name": "follow",
        "params": [
          {
            "type": "integer",
            "name": "followerId"
          },
          {
            "type": "integer",
            "name": "followeeId"
          }
        ],
        "return": {
          "type": "void"
        },
        "comment": "Follower follows a followee. If the operation is invalid, it should be a no-op."
      },
      {
        "name": "unfollow",
        "params": [
          {
            "type": "integer",
            "name": "followerId"
          },
          {
            "type": "integer",
            "name": "followeeId"
          }
        ],
        "return": {
          "type": "void"
        },
        "comment": "Follower unfollows a followee. If the operation is invalid, it should be a no-op."
      }
    ],
    "systemdesign": true,
    "params": [
      {
        "name": "inputs",
        "type": "integer[]"
      },
      {
        "name": "inputs",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "list<String>",
      "dealloc": true
    },
    "exampleTestcases": ""
  },
  "357": {
    "name": "countNumbersWithUniqueDigits",
    "params": [
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "2"
  },
  "363": {
    "name": "maxSumSubmatrix",
    "params": [
      {
        "name": "matrix",
        "type": "integer[][]"
      },
      {
        "name": "k",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[[1,0,1],[0,-2,3]]\n2"
  },
  "365": {
    "name": "canMeasureWater",
    "params": [
      {
        "name": "x",
        "type": "integer"
      },
      {
        "name": "y",
        "type": "integer"
      },
      {
        "name": "z",
        "type": "integer"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": ""
  },
  "367": {
    "name": "isPerfectSquare",
    "params": [
      {
        "name": "num",
        "type": "integer"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "16\n14"
  },
  "368": {
    "name": "largestDivisibleSubset",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "list<integer>"
    },
    "exampleTestcases": "[1,2,3]\n[1,2,4,8]"
  },
  "371": {
    "name": "getSum",
    "params": [
      {
        "name": "a",
        "type": "integer"
      },
      {
        "name": "b",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "1\n2\n2\n3"
  },
  "372": {
    "name": "superPow",
    "params": [
      {
        "name": "a",
        "type": "integer"
      },
      {
        "name": "b",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "2\n[3]\n2\n[1,0]\n1\n[4,3,3,8,5,2]\n2147483647\n[2,0,0]"
  },
  "373": {
    "name": "kSmallestPairs",
    "params": [
      {
        "name": "nums1",
        "type": "integer[]"
      },
      {
        "name": "nums2",
        "type": "integer[]"
      },
      {
        "name": "k",
        "type": "integer"
      }
    ],
    "return": {
      "type": "list<list<integer>>"
    },
    "exampleTestcases": "[1,7,11]\n[2,4,6]\n3\n[]\n[]\n5\n[]\n[3,5,7,9]\n1"
  },
  "374": {
    "name": "guessNumber",
    "params": [
      {
        "name": "n",
        "type": "integer"
      },
      {
        "name": "pick",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "manual": true,
    "exampleTestcases": "10\n6\n1\n1\n2\n1\n2\n2"
  },
  "375": {
    "name": "getMoneyAmount",
    "params": [
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "10\n1\n2"
  },
  "376": {
    "name": "wiggleMaxLength",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[1,7,4,9,2,5]\n[1,17,5,10,13,15,10,5,16,8]\n[1,2,3,4,5,6,7,8,9]"
  },
  "377": {
    "name": "combinationSum4",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      },
      {
        "name": "target",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": ""
  },
  "378": {
    "name": "kthSmallest",
    "params": [
      {
        "name": "matrix",
        "type": "integer[][]"
      },
      {
        "name": "k",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[[1,5,9],[10,11,13],[12,13,15]]\n8\n[[-5]]\n1"
  },
  "380": {
    "classname": "RandomizedSet",
    "maxbytesperline": 121000,
    "constructor": {
      "params": [],
      "comment": "Initialize your data structure here."
    },
    "methods": [
      {
        "name": "insert",
        "params": [
          {
            "type": "integer",
            "name": "val"
          }
        ],
        "return": {
          "type": "boolean"
        },
        "comment": "Inserts a value to the set. Returns true if the set did not already contain the specified element."
      },
      {
        "name": "remove",
        "params": [
          {
            "type": "integer",
            "name": "val"
          }
        ],
        "return": {
          "type": "boolean"
        },
        "comment": "Removes a value from the set. Returns true if the set contained the specified element."
      },
      {
        "name": "getRandom",
        "params": [],
        "return": {
          "type": "integer"
        },
        "comment": "Get a random element from the set."
      }
    ],
    "systemdesign": true,
    "params": [
      {
        "name": "inputs",
        "type": "integer[]"
      },
      {
        "name": "inputs",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "list<String>",
      "dealloc": true
    },
    "exampleTestcases": "[\"RandomizedSet\",\"insert\",\"remove\",\"insert\",\"getRandom\",\"remove\",\"insert\",\"getRandom\"]\n[[],[1],[2],[2],[],[1],[2],[]]"
  },
  "381": {
    "classname": "RandomizedCollection",
    "maxbytesperline": 121000,
    "constructor": {
      "params": [],
      "comment": "Initialize your data structure here."
    },
    "methods": [
      {
        "name": "insert",
        "params": [
          {
            "type": "integer",
            "name": "val"
          }
        ],
        "return": {
          "type": "boolean"
        },
        "comment": "Inserts a value to the collection. Returns true if the collection did not already contain the specified element."
      },
      {
        "name": "remove",
        "params": [
          {
            "type": "integer",
            "name": "val"
          }
        ],
        "return": {
          "type": "boolean"
        },
        "comment": "Removes a value from the collection. Returns true if the collection contained the specified element."
      },
      {
        "name": "getRandom",
        "params": [],
        "return": {
          "type": "integer"
        },
        "comment": "Get a random element from the collection."
      }
    ],
    "systemdesign": true,
    "params": [
      {
        "name": "inputs",
        "type": "integer[]"
      },
      {
        "name": "inputs",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "list<String>",
      "dealloc": true
    },
    "exampleTestcases": ""
  },
  "382": {
    "classname": "Solution",
    "maxbytesperline": 121000,
    "constructor": {
      "params": [
        {
          "type": "ListNode",
          "name": "head"
        }
      ],
      "comment": "@param head The linked list's head.\n        Note that the head is guaranteed to be not null, so it contains at least one node."
    },
    "methods": [
      {
        "name": "getRandom",
        "params": [],
        "return": {
          "type": "integer"
        },
        "deserialize": false,
        "comment": "Returns a random node's value."
      }
    ],
    "systemdesign": true,
    "params": [
      {
        "name": "inputs",
        "type": "integer[]"
      },
      {
        "name": "inputs",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "list<String>",
      "dealloc": true
    },
    "exampleTestcases": "[\"Solution\",\"getRandom\",\"getRandom\",\"getRandom\",\"getRandom\",\"getRandom\"]\n[[[1,2,3]],[],[],[],[],[]]"
  },
  "383": {
    "name": "canConstruct",
    "params": [
      {
        "name": "ransomNote",
        "type": "string"
      },
      {
        "name": "magazine",
        "type": "string"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "\"a\"\n\"b\"\n\"aa\"\n\"ab\"\n\"aa\"\n\"aab\""
  },
  "384": {
    "classname": "Solution",
    "maxbytesperline": 180000,
    "constructor": {
      "params": [
        {
          "type": "integer[]",
          "name": "nums"
        },
        {
          "type": "integer",
          "name": "size",
          "lang": "c",
          "value": "size_1"
        }
      ]
    },
    "methods": [
      {
        "name": "reset",
        "params": [],
        "return": {
          "type": "integer[]"
        },
        "comment": "Resets the array to its original configuration and return it."
      },
      {
        "name": "shuffle",
        "params": [],
        "return": {
          "type": "integer[]"
        },
        "comment": "Returns a random shuffling of the array."
      }
    ],
    "systemdesign": true,
    "params": [
      {
        "name": "inputs",
        "type": "integer[]"
      },
      {
        "name": "inputs",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "list<String>",
      "dealloc": true
    },
    "exampleTestcases": "[\"Solution\",\"shuffle\",\"reset\",\"shuffle\"]\n[[[1,2,3]],[],[],[]]"
  },
  "385": {
    "name": "deserialize",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "NestedInteger"
    },
    "manual": false,
    "exampleTestcases": ""
  },
  "386": {
    "name": "lexicalOrder",
    "params": [
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "list<integer>"
    },
    "exampleTestcases": ""
  },
  "387": {
    "name": "firstUniqChar",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": ""
  },
  "388": {
    "name": "lengthLongestPath",
    "params": [
      {
        "name": "input",
        "type": "string"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "\"dir\\n\\tsubdir1\\n\\tsubdir2\\n\\t\\tfile.ext\"\n\"dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext\"\n\"a\"\n\"file1.txt\\nfile2.txt\\nlongfile.txt\""
  },
  "389": {
    "name": "findTheDifference",
    "params": [
      {
        "name": "s",
        "type": "string"
      },
      {
        "name": "t",
        "type": "string"
      }
    ],
    "return": {
      "type": "character"
    },
    "exampleTestcases": "\"abcd\"\n\"abcde\"\n\"\"\n\"y\"\n\"a\"\n\"aa\"\n\"ae\"\n\"aea\""
  },
  "390": {
    "name": "lastRemaining",
    "params": [
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": ""
  },
  "391": {
    "name": "isRectangleCover",
    "params": [
      {
        "name": "rectangles",
        "type": "integer[][]"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": ""
  },
  "392": {
    "name": "isSubsequence",
    "params": [
      {
        "name": "s",
        "type": "string"
      },
      {
        "name": "t",
        "type": "string"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "\"abc\"\n\"ahbgdc\"\n\"axc\"\n\"ahbgdc\""
  },
  "393": {
    "name": "validUtf8",
    "params": [
      {
        "name": "data",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": ""
  },
  "394": {
    "name": "decodeString",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": "\"3[a]2[bc]\"\n\"3[a2[c]]\"\n\"2[abc]3[cd]ef\"\n\"abc3[cd]xyz\""
  },
  "395": {
    "name": "longestSubstring",
    "params": [
      {
        "name": "s",
        "type": "string"
      },
      {
        "name": "k",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "\"aaabb\"\n3\n\"ababbc\"\n2"
  },
  "396": {
    "name": "maxRotateFunction",
    "params": [
      {
        "name": "A",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": ""
  },
  "397": {
    "name": "integerReplacement",
    "params": [
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "8\n7\n4"
  },
  "398": {
    "classname": "Solution",
    "constructor": {
      "params": [
        {
          "name": "nums",
          "type": "integer[]"
        },
        {
          "type": "integer",
          "name": "numsSize",
          "lang": "c",
          "value": "size_1"
        }
      ]
    },
    "methods": [
      {
        "name": "pick",
        "params": [
          {
            "name": "target",
            "type": "integer"
          }
        ],
        "return": {
          "type": "integer"
        }
      }
    ],
    "systemdesign": true,
    "params": [
      {
        "name": "inputs",
        "type": "integer[]"
      },
      {
        "name": "inputs",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "list<String>",
      "dealloc": true
    },
    "exampleTestcases": ""
  },
  "399": {
    "name": "calcEquation",
    "params": [
      {
        "name": "equations",
        "type": "list<list<string>>"
      },
      {
        "name": "values",
        "type": "double[]"
      },
      {
        "name": "queries",
        "type": "list<list<string>>"
      }
    ],
    "return": {
      "type": "double[]"
    },
    "exampleTestcases": "[[\"a\",\"b\"],[\"b\",\"c\"]]\n[2.0,3.0]\n[[\"a\",\"c\"],[\"b\",\"a\"],[\"a\",\"e\"],[\"a\",\"a\"],[\"x\",\"x\"]]\n[[\"a\",\"b\"],[\"b\",\"c\"],[\"bc\",\"cd\"]]\n[1.5,2.5,5.0]\n[[\"a\",\"c\"],[\"c\",\"b\"],[\"bc\",\"cd\"],[\"cd\",\"bc\"]]\n[[\"a\",\"b\"]]\n[0.5]\n[[\"a\",\"b\"],[\"b\",\"a\"],[\"a\",\"c\"],[\"x\",\"y\"]]"
  },
  "400": {
    "name": "findNthDigit",
    "params": [
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": ""
  },
  "401": {
    "name": "readBinaryWatch",
    "params": [
      {
        "name": "num",
        "type": "integer"
      }
    ],
    "return": {
      "type": "list<string>"
    },
    "exampleTestcases": ""
  },
  "402": {
    "name": "removeKdigits",
    "params": [
      {
        "name": "num",
        "type": "string"
      },
      {
        "name": "k",
        "type": "integer"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": ""
  },
  "403": {
    "name": "canCross",
    "params": [
      {
        "name": "stones",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "[0,1,3,5,6,8,12,17]\n[0,1,2,3,4,8,9,11]"
  },
  "404": {
    "name": "sumOfLeftLeaves",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": ""
  },
  "405": {
    "name": "toHex",
    "params": [
      {
        "name": "num",
        "type": "integer"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": ""
  },
  "406": {
    "name": "reconstructQueue",
    "params": [
      {
        "name": "people",
        "type": "integer[][]"
      }
    ],
    "return": {
      "type": "integer[][]",
      "colsize": "2"
    },
    "exampleTestcases": "[[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]\n[[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]"
  },
  "407": {
    "name": "trapRainWater",
    "params": [
      {
        "name": "heightMap",
        "type": "integer[][]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": ""
  },
  "409": {
    "name": "longestPalindrome",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "\"abccccdd\"\n\"a\"\n\"bb\""
  },
  "410": {
    "name": "splitArray",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      },
      {
        "name": "m",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[7,2,5,10,8]\n2\n[1,2,3,4,5]\n2\n[1,4,4]\n3"
  },
  "412": {
    "name": "fizzBuzz",
    "params": [
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "list<string>"
    },
    "exampleTestcases": ""
  },
  "413": {
    "name": "numberOfArithmeticSlices",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[1,2,3,4]\n[1]"
  },
  "414": {
    "name": "thirdMax",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[3,2,1]\n[1,2]\n[2,2,3,1]"
  },
  "415": {
    "name": "addStrings",
    "params": [
      {
        "name": "num1",
        "type": "string"
      },
      {
        "name": "num2",
        "type": "string"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": ""
  },
  "416": {
    "name": "canPartition",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "[1,5,11,5]\n[1,2,3,5]"
  },
  "417": {
    "name": "pacificAtlantic",
    "params": [
      {
        "name": "matrix",
        "type": "integer[][]"
      }
    ],
    "return": {
      "type": "list<list<integer>>"
    },
    "exampleTestcases": ""
  },
  "419": {
    "name": "countBattleships",
    "params": [
      {
        "name": "board",
        "type": "character[][]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": ""
  },
  "420": {
    "name": "strongPasswordChecker",
    "params": [
      {
        "name": "password",
        "type": "string"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "\"a\"\n\"aA1\"\n\"1337C0d3\""
  },
  "421": {
    "name": "findMaximumXOR",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[3,10,5,25,2,8]\n[0]\n[2,4]\n[8,10,2]\n[14,70,53,83,49,91,36,80,92,51,66,70]"
  },
  "423": {
    "name": "originalDigits",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": ""
  },
  "424": {
    "name": "characterReplacement",
    "params": [
      {
        "name": "s",
        "type": "string"
      },
      {
        "name": "k",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": ""
  },
  "432": {
    "classname": "AllOne",
    "constructor": {
      "params": [],
      "comment": "Initialize your data structure here."
    },
    "methods": [
      {
        "name": "inc",
        "params": [
          {
            "type": "string",
            "name": "key"
          }
        ],
        "return": {
          "type": "void"
        },
        "comment": "Inserts a new key <Key> with value 1. Or increments an existing key by 1."
      },
      {
        "name": "dec",
        "params": [
          {
            "type": "string",
            "name": "key"
          }
        ],
        "return": {
          "type": "void"
        },
        "comment": "Decrements an existing key by 1. If Key's value is 1, remove it from the data structure."
      },
      {
        "name": "getMaxKey",
        "params": [],
        "return": {
          "type": "string"
        },
        "comment": "Returns one of the keys with maximal value."
      },
      {
        "name": "getMinKey",
        "params": [],
        "return": {
          "type": "string"
        },
        "comment": "Returns one of the keys with Minimal value."
      }
    ],
    "systemdesign": true,
    "params": [
      {
        "name": "inputs",
        "type": "integer[]"
      },
      {
        "name": "inputs",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "list<String>",
      "dealloc": true
    },
    "exampleTestcases": ""
  },
  "433": {
    "name": "minMutation",
    "params": [
      {
        "name": "start",
        "type": "string"
      },
      {
        "name": "end",
        "type": "string"
      },
      {
        "name": "bank",
        "type": "string[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": ""
  },
  "434": {
    "name": "countSegments",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "\"Hello, my name is John\"\n\"Hello\"\n\"love live! mu'sic forever\"\n\"\""
  },
  "435": {
    "name": "eraseOverlapIntervals",
    "params": [
      {
        "name": "intervals",
        "type": "integer[][]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": ""
  },
  "436": {
    "name": "findRightInterval",
    "params": [
      {
        "name": "intervals",
        "type": "integer[][]"
      }
    ],
    "return": {
      "type": "integer[]"
    },
    "exampleTestcases": "[[1,2]]\n[[3,4],[2,3],[1,2]]\n[[1,4],[2,3],[3,4]]"
  },
  "437": {
    "name": "pathSum",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      },
      {
        "name": "sum",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": ""
  },
  "438": {
    "name": "findAnagrams",
    "params": [
      {
        "name": "s",
        "type": "string"
      },
      {
        "name": "p",
        "type": "string"
      }
    ],
    "return": {
      "type": "list<integer>"
    },
    "exampleTestcases": ""
  },
  "440": {
    "name": "findKthNumber",
    "params": [
      {
        "name": "n",
        "type": "integer"
      },
      {
        "name": "k",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": ""
  },
  "441": {
    "name": "arrangeCoins",
    "params": [
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": ""
  },
  "442": {
    "name": "findDuplicates",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "list<integer>"
    },
    "exampleTestcases": ""
  },
  "443": {
    "name": "compress",
    "params": [
      {
        "name": "chars",
        "type": "character[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "output": {
      "paramindex": 0,
      "size": "ret"
    },
    "exampleTestcases": "[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\n[\"a\"]\n[\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\n[\"a\",\"a\",\"a\",\"b\",\"b\",\"a\",\"a\"]"
  },
  "445": {
    "name": "addTwoNumbers",
    "params": [
      {
        "name": "l1",
        "type": "ListNode",
        "dealloc": false
      },
      {
        "name": "l2",
        "type": "ListNode",
        "dealloc": false
      }
    ],
    "return": {
      "type": "ListNode",
      "dealloc": true
    },
    "exampleTestcases": ""
  },
  "446": {
    "name": "numberOfArithmeticSlices",
    "params": [
      {
        "name": "A",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": ""
  },
  "447": {
    "name": "numberOfBoomerangs",
    "params": [
      {
        "name": "points",
        "type": "integer[][]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[[0,0],[1,0],[2,0]]\n[[1,1],[2,2],[3,3]]\n[[1,1]]"
  },
  "448": {
    "name": "findDisappearedNumbers",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "list<integer>"
    },
    "exampleTestcases": ""
  },
  "449": {
    "name": "CodecDriver",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "TreeNode"
    },
    "manual": true,
    "exampleTestcases": "[2,1,3]\n[]"
  },
  "450": {
    "name": "deleteNode",
    "params": [
      {
        "name": "root",
        "type": "TreeNode",
        "dealloc": false
      },
      {
        "name": "key",
        "type": "integer"
      }
    ],
    "return": {
      "type": "TreeNode"
    },
    "exampleTestcases": "[5,3,6,2,4,null,7]\n3\n[5,3,6,2,4,null,7]\n0\n[]\n0"
  },
  "451": {
    "name": "frequencySort",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": ""
  },
  "452": {
    "name": "findMinArrowShots",
    "params": [
      {
        "name": "points",
        "type": "integer[][]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[[10,16],[2,8],[1,6],[7,12]]\n[[1,2],[3,4],[5,6],[7,8]]\n[[1,2],[2,3],[3,4],[4,5]]\n[[1,2]]\n[[2,3],[2,3]]"
  },
  "453": {
    "name": "minMoves",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[1,2,3]\n[1,1,1]"
  },
  "454": {
    "name": "fourSumCount",
    "params": [
      {
        "name": "A",
        "type": "integer[]"
      },
      {
        "name": "B",
        "type": "integer[]"
      },
      {
        "name": "C",
        "type": "integer[]"
      },
      {
        "name": "D",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": ""
  },
  "455": {
    "name": "findContentChildren",
    "params": [
      {
        "name": "g",
        "type": "integer[]"
      },
      {
        "name": "s",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[1,2,3]\n[1,1]\n[1,2]\n[1,2,3]"
  },
  "456": {
    "name": "find132pattern",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "[1,2,3,4]\n[3,1,4,2]\n[-1,3,2,0]"
  },
  "457": {
    "name": "circularArrayLoop",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "[2,-1,1,2,2]\n[-1,2]\n[-2,1,-1,-2,-2]"
  },
  "458": {
    "name": "poorPigs",
    "params": [
      {
        "name": "buckets",
        "type": "integer"
      },
      {
        "name": "minutesToDie",
        "type": "integer"
      },
      {
        "name": "minutesToTest",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "1000\n15\n60\n4\n15\n15\n4\n15\n30"
  },
  "459": {
    "name": "repeatedSubstringPattern",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "\"abab\"\n\"aba\"\n\"abcabcabcabc\""
  },
  "460": {
    "classname": "LFUCache",
    "maxbytesperline": 200000,
    "constructor": {
      "params": [
        {
          "type": "integer",
          "name": "capacity"
        }
      ]
    },
    "methods": [
      {
        "name": "get",
        "params": [
          {
            "type": "integer",
            "name": "key"
          }
        ],
        "return": {
          "type": "integer"
        }
      },
      {
        "name": "put",
        "params": [
          {
            "type": "integer",
            "name": "key"
          },
          {
            "type": "integer",
            "name": "value"
          }
        ],
        "return": {
          "type": "void"
        }
      }
    ],
    "systemdesign": true,
    "params": [
      {
        "name": "inputs",
        "type": "integer[]"
      },
      {
        "name": "inputs",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "list<String>",
      "dealloc": true
    },
    "exampleTestcases": "[\"LFUCache\",\"put\",\"put\",\"get\",\"put\",\"get\",\"get\",\"put\",\"get\",\"get\",\"get\"]\n[[2],[1,1],[2,2],[1],[3,3],[2],[3],[4,4],[1],[3],[4]]"
  },
  "461": {
    "name": "hammingDistance",
    "params": [
      {
        "name": "x",
        "type": "integer"
      },
      {
        "name": "y",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": ""
  },
  "462": {
    "name": "minMoves2",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": ""
  },
  "463": {
    "name": "islandPerimeter",
    "params": [
      {
        "name": "grid",
        "type": "integer[][]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[[0,1,0,0],[1,1,1,0],[0,1,0,0],[1,1,0,0]]\n[[1]]\n[[1,0]]"
  },
  "464": {
    "name": "canIWin",
    "params": [
      {
        "name": "maxChoosableInteger",
        "type": "integer"
      },
      {
        "name": "desiredTotal",
        "type": "integer"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "10\n11\n10\n0\n10\n1"
  },
  "466": {
    "name": "getMaxRepetitions",
    "params": [
      {
        "name": "s1",
        "type": "string"
      },
      {
        "name": "n1",
        "type": "integer"
      },
      {
        "name": "s2",
        "type": "string"
      },
      {
        "name": "n2",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": ""
  },
  "467": {
    "name": "findSubstringInWraproundString",
    "params": [
      {
        "name": "p",
        "type": "string"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": ""
  },
  "468": {
    "name": "validIPAddress",
    "params": [
      {
        "name": "IP",
        "type": "string"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": "\"172.16.254.1\"\n\"2001:0db8:85a3:0:0:8A2E:0370:7334\"\n\"256.256.256.256\"\n\"2001:0db8:85a3:0:0:8A2E:0370:7334:\"\n\"1e1.4.5.6\""
  },
  "472": {
    "name": "findAllConcatenatedWordsInADict",
    "params": [
      {
        "name": "words",
        "type": "string[]"
      }
    ],
    "return": {
      "type": "list<string>"
    },
    "exampleTestcases": "[\"cat\",\"cats\",\"catsdogcats\",\"dog\",\"dogcatsdog\",\"hippopotamuses\",\"rat\",\"ratcatdogcat\"]\n[\"cat\",\"dog\",\"catdog\"]"
  },
  "473": {
    "name": "makesquare",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": ""
  },
  "474": {
    "name": "findMaxForm",
    "params": [
      {
        "name": "strs",
        "type": "string[]"
      },
      {
        "name": "m",
        "type": "integer"
      },
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[\"10\",\"0001\",\"111001\",\"1\",\"0\"]\n5\n3\n[\"10\",\"0\",\"1\"]\n1\n1"
  },
  "475": {
    "name": "findRadius",
    "params": [
      {
        "name": "houses",
        "type": "integer[]"
      },
      {
        "name": "heaters",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[1,2,3]\n[2]\n[1,2,3,4]\n[1,4]\n[1,5]\n[2]"
  },
  "476": {
    "name": "findComplement",
    "params": [
      {
        "name": "num",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "5\n1"
  },
  "477": {
    "name": "totalHammingDistance",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": ""
  },
  "479": {
    "name": "largestPalindrome",
    "params": [
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": ""
  },
  "480": {
    "name": "medianSlidingWindow",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      },
      {
        "name": "k",
        "type": "integer"
      }
    ],
    "return": {
      "type": "double[]"
    },
    "exampleTestcases": ""
  },
  "481": {
    "name": "magicalString",
    "params": [
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": ""
  },
  "482": {
    "name": "licenseKeyFormatting",
    "params": [
      {
        "name": "S",
        "type": "string"
      },
      {
        "name": "K",
        "type": "integer"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": ""
  },
  "483": {
    "name": "smallestGoodBase",
    "params": [
      {
        "name": "n",
        "type": "string"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": ""
  },
  "485": {
    "name": "findMaxConsecutiveOnes",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": ""
  },
  "486": {
    "name": "PredictTheWinner",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": ""
  },
  "488": {
    "name": "findMinStep",
    "params": [
      {
        "name": "board",
        "type": "string"
      },
      {
        "name": "hand",
        "type": "string"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "\"WRRBBW\"\n\"RB\"\n\"WWRRBBWW\"\n\"WRBRW\"\n\"G\"\n\"GGGGG\"\n\"RBYYBBRRB\"\n\"YRBGB\""
  },
  "489": {
    "name": "kthSmallestPath",
    "params": [
      {
        "name": "destination",
        "type": "integer[]"
      },
      {
        "type": "integer",
        "name": "k"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": "[2,3]\n1\n[2,3]\n2\n[2,3]\n3"
  },
  "491": {
    "name": "findSubsequences",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "list<list<integer>>",
      "dealloc": true
    },
    "exampleTestcases": ""
  },
  "492": {
    "name": "constructRectangle",
    "params": [
      {
        "name": "area",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer[]"
    },
    "exampleTestcases": "4\n37\n122122"
  },
  "493": {
    "name": "reversePairs",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": ""
  },
  "494": {
    "name": "findTargetSumWays",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      },
      {
        "name": "S",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": ""
  },
  "495": {
    "name": "findPoisonedDuration",
    "params": [
      {
        "name": "timeSeries",
        "type": "integer[]"
      },
      {
        "name": "duration",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": ""
  },
  "496": {
    "name": "nextGreaterElement",
    "params": [
      {
        "name": "nums1",
        "type": "integer[]"
      },
      {
        "name": "nums2",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer[]"
    },
    "exampleTestcases": "[4,1,2]\n[1,3,4,2]\n[2,4]\n[1,2,3,4]"
  },
  "498": {
    "name": "findDiagonalOrder",
    "params": [
      {
        "name": "matrix",
        "type": "integer[][]"
      }
    ],
    "return": {
      "type": "integer[]"
    },
    "exampleTestcases": ""
  },
  "500": {
    "name": "findWords",
    "params": [
      {
        "name": "words",
        "type": "string[]"
      }
    ],
    "return": {
      "type": "string[]"
    },
    "exampleTestcases": "[\"Hello\",\"Alaska\",\"Dad\",\"Peace\"]\n[\"omk\"]\n[\"adsdf\",\"sfd\"]"
  },
  "501": {
    "name": "findMode",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "integer[]"
    },
    "exampleTestcases": "[1,null,2,2]\n[0]"
  },
  "502": {
    "name": "findMaximizedCapital",
    "params": [
      {
        "name": "k",
        "type": "integer"
      },
      {
        "name": "W",
        "type": "integer"
      },
      {
        "name": "Profits",
        "type": "integer[]"
      },
      {
        "name": "Capital",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": ""
  },
  "503": {
    "name": "nextGreaterElements",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer[]"
    },
    "exampleTestcases": ""
  },
  "504": {
    "name": "convertToBase7",
    "params": [
      {
        "name": "num",
        "type": "integer"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": ""
  },
  "506": {
    "name": "findRelativeRanks",
    "params": [
      {
        "name": "score",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "string[]"
    },
    "exampleTestcases": "[5,4,3,2,1]\n[10,3,8,9,4]"
  },
  "507": {
    "name": "checkPerfectNumber",
    "params": [
      {
        "name": "num",
        "type": "integer"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "28\n6\n496\n8128\n2"
  },
  "508": {
    "name": "findFrequentTreeSum",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "integer[]"
    },
    "exampleTestcases": ""
  },
  "513": {
    "name": "findBottomLeftValue",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[2,1,3]\n[1,2,3,4,null,5,6,null,null,7]"
  },
  "514": {
    "name": "findRotateSteps",
    "params": [
      {
        "name": "ring",
        "type": "string"
      },
      {
        "name": "key",
        "type": "string"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": ""
  },
  "515": {
    "name": "largestValues",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "list<integer>"
    },
    "exampleTestcases": "[1,3,2,5,3,null,9]\n[1,2,3]\n[1]\n[1,null,2]\n[]"
  },
  "516": {
    "name": "longestPalindromeSubseq",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "\"bbbab\"\n\"cbbd\""
  },
  "517": {
    "name": "findMinMoves",
    "params": [
      {
        "name": "machines",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": ""
  },
  "518": {
    "name": "change",
    "params": [
      {
        "name": "amount",
        "type": "integer"
      },
      {
        "name": "coins",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": ""
  },
  "520": {
    "name": "detectCapitalUse",
    "params": [
      {
        "name": "word",
        "type": "string"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": ""
  },
  "521": {
    "name": "findLUSlength",
    "params": [
      {
        "name": "a",
        "type": "string"
      },
      {
        "name": "b",
        "type": "string"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "\"aba\"\n\"cdc\"\n\"aaa\"\n\"bbb\"\n\"aaa\"\n\"aaa\""
  },
  "522": {
    "name": "findLUSlength",
    "params": [
      {
        "name": "strs",
        "type": "string[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": ""
  },
  "523": {
    "name": "checkSubarraySum",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      },
      {
        "name": "k",
        "type": "integer"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": ""
  },
  "524": {
    "name": "findLongestWord",
    "params": [
      {
        "name": "s",
        "type": "string"
      },
      {
        "name": "dictionary",
        "type": "list<string>"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": "\"abpcplea\"\n[\"ale\",\"apple\",\"monkey\",\"plea\"]\n\"abpcplea\"\n[\"a\",\"b\",\"c\"]"
  },
  "525": {
    "name": "findMaxLength",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": ""
  },
  "526": {
    "name": "countArrangement",
    "params": [
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "2\n1"
  },
  "528": {
    "name": "swapNodes",
    "params": [
      {
        "name": "head",
        "type": "ListNode"
      },
      {
        "name": "k",
        "type": "integer"
      }
    ],
    "return": {
      "type": "ListNode"
    },
    "exampleTestcases": "[1,2,3,4,5]\n2\n[7,9,6,6,7,8,3,0,9,5]\n5\n[1]\n1\n[1,2]\n1\n[1,2,3]\n2"
  },
  "529": {
    "name": "updateBoard",
    "params": [
      {
        "name": "board",
        "type": "character[][]"
      },
      {
        "name": "click",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "character[][]"
    },
    "exampleTestcases": ""
  },
  "530": {
    "name": "getMinimumDifference",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": ""
  },
  "532": {
    "name": "findPairs",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      },
      {
        "name": "k",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[3,1,4,1,5]\n2\n[1,2,3,4,5]\n1\n[1,3,1,5,4]\n0\n[1,2,4,4,3,3,0,9,2,3]\n3\n[-1,-2,-3]\n1"
  },
  "535": {
    "name": "CodecDriver",
    "params": [
      {
        "name": "url",
        "type": "string"
      }
    ],
    "return": {
      "type": "string"
    },
    "manual": true,
    "exampleTestcases": ""
  },
  "537": {
    "name": "complexNumberMultiply",
    "params": [
      {
        "name": "a",
        "type": "string"
      },
      {
        "name": "b",
        "type": "string"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": ""
  },
  "538": {
    "name": "convertBST",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "TreeNode"
    },
    "exampleTestcases": "[4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]\n[0,null,1]\n[1,0,2]\n[3,2,4,1]"
  },
  "539": {
    "name": "findMinDifference",
    "params": [
      {
        "name": "timePoints",
        "type": "list<string>"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[\"23:59\",\"00:00\"]\n[\"00:00\",\"23:59\",\"00:00\"]"
  },
  "540": {
    "name": "singleNonDuplicate",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[1,1,2,3,3,4,4,8,8]\n[3,3,7,7,10,11,11]"
  },
  "541": {
    "name": "reverseStr",
    "params": [
      {
        "name": "s",
        "type": "string"
      },
      {
        "name": "k",
        "type": "integer"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": "\"abcdefg\"\n2\n\"abcd\"\n2"
  },
  "542": {
    "name": "updateMatrix",
    "params": [
      {
        "name": "matrix",
        "type": "integer[][]"
      }
    ],
    "return": {
      "type": "integer[][]"
    },
    "exampleTestcases": ""
  },
  "543": {
    "name": "diameterOfBinaryTree",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[1,2,3,4,5]\n[1,2]"
  },
  "546": {
    "name": "removeBoxes",
    "params": [
      {
        "name": "boxes",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[1,3,2,2,2,3,4,3,1]\n[1,1,1]\n[1]"
  },
  "547": {
    "name": "findCircleNum",
    "params": [
      {
        "name": "isConnected",
        "type": "integer[][]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[[1,1,0],[1,1,0],[0,0,1]]\n[[1,0,0],[0,1,0],[0,0,1]]"
  },
  "551": {
    "name": "checkRecord",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "\"PPALLP\"\n\"PPALLL\""
  },
  "552": {
    "name": "checkRecord",
    "params": [
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "2\n1\n10101"
  },
  "553": {
    "name": "optimalDivision",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": ""
  },
  "554": {
    "name": "leastBricks",
    "params": [
      {
        "name": "wall",
        "type": "list<list<integer>>"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": ""
  },
  "556": {
    "name": "nextGreaterElement",
    "params": [
      {
        "name": "n",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "12\n21"
  },
  "557": {
    "name": "reverseWords",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": "\"Let's take LeetCode contest\"\n\"God Ding\""
  },
  "560": {
    "name": "subarraySum",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      },
      {
        "name": "k",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[1,1,1]\n2\n[1,2,3]\n3"
  },
  "561": {
    "name": "arrayPairSum",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[1,4,3,2]\n[6,2,6,5,1,2]"
  },
  "563": {
    "name": "findTilt",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[1,2,3]\n[4,2,9,3,5,null,7]\n[21,7,14,1,1,2,2,3,3]"
  },
  "564": {
    "name": "nearestPalindromic",
    "params": [
      {
        "name": "n",
        "type": "string"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": ""
  },
  "565": {
    "name": "arrayNesting",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": ""
  },
  "566": {
    "name": "matrixReshape",
    "params": [
      {
        "name": "nums",
        "type": "integer[][]"
      },
      {
        "name": "r",
        "type": "integer"
      },
      {
        "name": "c",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer[][]"
    },
    "exampleTestcases": ""
  },
  "567": {
    "name": "checkInclusion",
    "params": [
      {
        "name": "s1",
        "type": "string"
      },
      {
        "name": "s2",
        "type": "string"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": ""
  },
  "572": {
    "name": "isSubtree",
    "params": [
      {
        "name": "s",
        "type": "TreeNode"
      },
      {
        "name": "t",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": ""
  },
  "575": {
    "name": "distributeCandies",
    "params": [
      {
        "name": "candyType",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[1,1,2,2,3,3]\n[1,1,2,3]\n[6,6,6,6]"
  },
  "576": {
    "name": "findPaths",
    "params": [
      {
        "name": "m",
        "type": "integer"
      },
      {
        "name": "n",
        "type": "integer"
      },
      {
        "name": "N",
        "type": "integer"
      },
      {
        "name": "i",
        "type": "integer"
      },
      {
        "name": "j",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": ""
  },
  "581": {
    "name": "findUnsortedSubarray",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[2,6,4,8,10,9,15]\n[1,2,3,4]\n[1]"
  },
  "583": {
    "name": "minDistance",
    "params": [
      {
        "name": "word1",
        "type": "string"
      },
      {
        "name": "word2",
        "type": "string"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "\"sea\"\n\"eat\"\n\"leetcode\"\n\"etco\""
  },
  "587": {
    "name": "outerTrees",
    "params": [
      {
        "name": "points",
        "type": "integer[][]"
      }
    ],
    "return": {
      "type": "integer[][]"
    },
    "exampleTestcases": ""
  },
  "591": {
    "name": "isValid",
    "params": [
      {
        "name": "code",
        "type": "string"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": ""
  },
  "592": {
    "name": "fractionAddition",
    "params": [
      {
        "name": "expression",
        "type": "string"
      }
    ],
    "return": {
      "type": "string"
    },
    "exampleTestcases": ""
  },
  "593": {
    "name": "validSquare",
    "params": [
      {
        "name": "p1",
        "type": "integer[]"
      },
      {
        "name": "p2",
        "type": "integer[]"
      },
      {
        "name": "p3",
        "type": "integer[]"
      },
      {
        "name": "p4",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "boolean"
    },
    "exampleTestcases": "[0,0]\n[1,1]\n[1,0]\n[0,1]\n[0,0]\n[1,1]\n[1,0]\n[0,12]\n[1,0]\n[-1,0]\n[0,1]\n[0,-1]"
  },
  "594": {
    "name": "findLHS",
    "params": [
      {
        "name": "nums",
        "type": "integer[]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "[1,3,2,2,5,2,3,7]\n[1,2,3,4]\n[1,1,1,1]"
  },
  "598": {
    "name": "maxCount",
    "params": [
      {
        "name": "m",
        "type": "integer"
      },
      {
        "name": "n",
        "type": "integer"
      },
      {
        "name": "ops",
        "type": "integer[][]"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": "3\n3\n[[2,2],[3,3]]\n3\n3\n[[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3]]\n3\n3\n[]"
  },
  "599": {
    "name": "findRestaurant",
    "params": [
      {
        "name": "list1",
        "type": "string[]"
      },
      {
        "name": "list2",
        "type": "string[]"
      }
    ],
    "return": {
      "type": "string[]"
    },
    "exampleTestcases": "[\"Shogun\",\"Tapioca Express\",\"Burger King\",\"KFC\"]\n[\"Piatti\",\"The Grill at Torrey Pines\",\"Hungry Hunter Steakhouse\",\"Shogun\"]\n[\"Shogun\",\"Tapioca Express\",\"Burger King\",\"KFC\"]\n[\"KFC\",\"Shogun\",\"Burger King\"]\n[\"Shogun\",\"Tapioca Express\",\"Burger King\",\"KFC\"]\n[\"KFC\",\"Burger King\",\"Tapioca Express\",\"Shogun\"]\n[\"Shogun\",\"Tapioca Express\",\"Burger King\",\"KFC\"]\n[\"KNN\",\"KFC\",\"Burger King\",\"Tapioca Express\",\"Shogun\"]\n[\"KFC\"]\n[\"KFC\"]"
  },
  "600": {
    "name": "findIntegers",
    "params": [
      {
        "name": "num",
        "type": "integer"
      }
    ],
    "return": {
      "type": "integer"
    },
    "exampleTestcases": ""
  }
}